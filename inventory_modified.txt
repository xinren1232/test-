<template>
  <div class="inventory-page">
    <div class="page-header">
      <h1>IQE智能库存管理系统</h1>
      <div class="header-actions">
        <el-button type="primary" @click="refreshData">
          <el-icon><Refresh /></el-icon>刷新数据
        </el-button>
        <el-button type="warning">
          <el-icon><Download /></el-icon>导出报表
        </el-button>
      </div>
    </div>

    <!-- 统计概览卡片 -->
    <el-row :gutter="20" class="dashboard-cards">
      <el-col :span="8">
        <el-card shadow="hover" class="dashboard-card frozen-items">
          <template #header>
            <div class="card-header">
              <h3>冻结物料批次</h3>
              <el-icon><Lock /></el-icon>
            </div>
          </template>
          <div class="card-value-container">
            <div class="card-value">{{ dashboardData.frozenItems }}</div>
            <div class="card-info">
              <div class="info-item">
                <span class="info-label">高风险占比</span>
                <span class="info-value">60%</span>
              </div>
              <div class="info-item">
                <span class="info-label">主要原因</span>
                <span class="info-value">质量问题</span>
              </div>
            </div>
          </div>
        </el-card>
      </el-col>
      <el-col :span="8">
        <el-card shadow="hover" class="dashboard-card risk-items">
          <template #header>
            <div class="card-header">
              <h3>风险物料批次</h3>
              <el-icon><Warning /></el-icon>
            </div>
          </template>
          <div class="card-value-container">
            <div class="card-value">{{ dashboardData.riskItems }}</div>
            <div class="card-info">
              <div class="info-item">
                <span class="info-label">供应商</span>
                <span class="info-value">电子科技</span>
              </div>
              <div class="info-item">
                <span class="info-label">物料类型</span>
                <span class="info-value">电子元件</span>
              </div>
            </div>
          </div>
        </el-card>
      </el-col>
      <el-col :span="8">
        <el-card shadow="hover" class="dashboard-card quality-items">
          <template #header>
            <div class="card-header">
              <h3>不合格物料批次</h3>
              <el-icon><CircleClose /></el-icon>
            </div>
          </template>
          <div class="card-value-container">
            <div class="card-value">{{ dashboardData.qualityProblemItems }}</div>
            <div class="card-info">
              <div class="info-item">
                <span class="info-label">来源仓库</span>
                <span class="info-value">原材料仓</span>
              </div>
              <div class="info-item">
                <span class="info-label">解决方案</span>
                <span class="info-value">退回处理</span>
              </div>
            </div>
          </div>
        </el-card>
      </el-col>
    </el-row>

    <!-- 物料供应商分析卡片 -->
    <el-row :gutter="20" class="dashboard-cards">
      <el-col :span="24">
        <el-card shadow="hover" class="supplier-card">
          <template #header>
            <div class="card-header">
              <h3>物料供应商分析</h3>
              <el-radio-group v-model="supplierAnalysisType" size="small">
                <el-radio-button label="quality">质量问题</el-radio-button>
                <el-radio-button label="delivery">交付及时率</el-radio-button>
                <el-radio-button label="risk">风险指数</el-radio-button>
              </el-radio-group>
            </div>
          </template>
          <div class="supplier-analysis">
            <div class="top-suppliers">
              <div v-for="(supplier, index) in [
                {name: '电子科技有限公司', issues: 12, riskScore: 86, score: 'D'},
                {name: '精密电子股份公司', issues: 8, riskScore: 73, score: 'C'},
                {name: '先进材料技术公司', issues: 5, riskScore: 65, score: 'B'},
                {name: '元器件制造集团', issues: 3, riskScore: 42, score: 'B+'},
                {name: '高新科技材料公司', issues: 1, riskScore: 28, score: 'A'}
              ]" :key="index" 
              class="supplier-item" 
              :class="supplier.score === 'D' ? 'high-risk' : supplier.score === 'C' ? 'medium-risk' : 'low-risk'">
                <div class="supplier-rank">{{ index + 1 }}</div>
                <div class="supplier-info">
                  <div class="supplier-name">{{ supplier.name }}</div>
                  <div class="supplier-stats">
                    <span>问题批次: {{ supplier.issues }}</span>
                    <span>风险指数: {{ supplier.riskScore }}%</span>
                  </div>
                </div>
                <div class="supplier-score">{{ supplier.score }}</div>
              </div>
            </div>
          </div>
        </el-card>
      </el-col>
    </el-row>

    <!-- 风险管控图表区域 -->
    <el-row :gutter="20" class="chart-section">
      <el-col :span="12">
        <el-card shadow="hover" class="chart-card">
          <template #header>
            <div class="card-header">
              <h3>物料冻结原因分布</h3>
              <el-select v-model="reasonChartPeriod" placeholder="时间范围" size="small" @change="renderReasonDistChart">
                <el-option label="近30天" value="30days"></el-option>
                <el-option label="近90天" value="90days"></el-option>
                <el-option label="近半年" value="180days"></el-option>
              </el-select>
            </div>
          </template>
          <div id="reasonDistChart" class="chart-container"></div>
        </el-card>
      </el-col>
      <el-col :span="12">
        <el-card shadow="hover" class="chart-card">
          <template #header>
            <div class="card-header">
              <h3>冻结原因趋势</h3>
              <el-select v-model="reasonTrendPeriod" placeholder="时间范围" size="small" @change="renderReasonTrendChart">
                <el-option label="近7天" value="7days"></el-option>
                <el-option label="近30天" value="30days"></el-option>
                <el-option label="近90天" value="90days"></el-option>
              </el-select>
            </div>
          </template>
          <div id="reasonTrendChart" class="chart-container"></div>
        </el-card>
      </el-col>
    </el-row>

    <!-- 解冻方案分析图表 -->
    <el-row :gutter="20" class="chart-section">
      <el-col :span="24">
        <el-card shadow="hover" class="chart-card">
          <template #header>
            <div class="card-header">
              <h3>解决方案与解冻情况分析</h3>
              <div class="chart-header-actions">
                <el-select v-model="solutionChartType" placeholder="图表类型" size="small" style="width: 120px; margin-right: 10px;" @change="renderSolutionsChart">
                  <el-option label="解决方案分布" value="distribution"></el-option>
                  <el-option label="处理时长分析" value="duration"></el-option>
                </el-select>
                <el-select v-model="solutionChartPeriod" placeholder="时间范围" size="small" @change="renderSolutionsChart">
                <el-option label="近30天" value="30days"></el-option>
                  <el-option label="近90天" value="90days"></el-option>
                  <el-option label="近半年" value="180days"></el-option>
              </el-select>
              </div>
            </div>
          </template>
          <div id="solutionsChart" class="chart-container"></div>
        </el-card>
      </el-col>
    </el-row>

    <!-- 物料表格区域 -->
    <el-card shadow="hover" class="table-card">
      <template #header>
        <div class="card-header">
          <h3>库存批次管理</h3>
          <div class="table-actions">
            <el-input
              v-model="searchQuery"
              placeholder="搜索物料编码、批次或供应商"
              prefix-icon="Search"
              clearable
              @input="handleSearch"
              style="width: 300px"
            ></el-input>
            <el-select v-model="statusFilter" placeholder="物料状态" @change="handleSearch" style="width: 120px">
              <el-option label="全部批次" value=""></el-option>
              <el-option label="正常物料" value="normal"></el-option>
              <el-option label="风险物料" value="risk"></el-option>
              <el-option label="已冻结" value="frozen"></el-option>
              <el-option label="质检不合格" value="quality_issue"></el-option>
              <el-option label="风险处理中" value="processing"></el-option>
            </el-select>
            <el-select v-model="warehouseFilter" placeholder="仓库" @change="handleSearch" style="width: 120px">
              <el-option label="全部仓库" value=""></el-option>
              <el-option label="主仓库" value="main"></el-option>
              <el-option label="原材料仓" value="raw"></el-option>
              <el-option label="半成品仓" value="semi"></el-option>
              <el-option label="成品仓" value="finished"></el-option>
              <el-option label="退货仓" value="return"></el-option>
            </el-select>
            <el-button type="primary" size="small" @click="showAdvancedSearch = true">
              高级筛选
              <el-icon><Filter /></el-icon>
            </el-button>
          </div>
        </div>
      </template>

      <el-table 
        :data="filteredInventoryData" 
        style="width: 100%" 
        v-loading="tableLoading"
        height="450"
        stripe
      >
        <el-table-column prop="warehouse" label="仓库" width="80"></el-table-column>
        <el-table-column prop="location" label="库位" width="80"></el-table-column>
        <el-table-column prop="factory" label="工厂" width="80"></el-table-column>
        <el-table-column prop="materialCode" label="物料编码" width="110" sortable></el-table-column>
        <el-table-column prop="materialName" label="物料名称" width="180"></el-table-column>
        <el-table-column prop="supplier" label="供应商" width="150"></el-table-column>
        <el-table-column label="批次" width="110" sortable>
          <template #default="scope">{{ formatBatchNumber(scope.row.batchNo) }}</template>
        </el-table-column>
        <el-table-column prop="quantity" label="数量" sortable width="80"></el-table-column>
        <el-table-column prop="unit" label="单位" width="50"></el-table-column>
        <el-table-column label="物料状态" width="90">
          <template #default="scope">
            <el-tag :type="getStatusType(scope.row)">{{ scope.row.status }}</el-tag>
          </template>
        </el-table-column>
        <el-table-column label="质量状态" width="120">
          <template #default="scope">
            <el-tag :type="getQualityType(scope.row)">{{ scope.row.quality }}</el-tag>
          </template>
        </el-table-column>
        <el-table-column prop="inspectionDate" label="最近检验时间" width="160"></el-table-column>
        <el-table-column prop="shelfLife" label="保质期" width="100">
          <template #default="scope">
            <el-tooltip v-if="scope.row.shelfLife" :content="getShelfLifeStatus(scope.row)" placement="top">
              <span :class="getShelfLifeClass(scope.row)">{{ scope.row.shelfLife }}</span>
            </el-tooltip>
            <span v-else>--</span>
          </template>
        </el-table-column>
        <el-table-column label="操作" fixed="right" width="200">
          <template #default="scope">
            <el-button 
              :type="scope.row.status === '冻结' ? 'success' : 'danger'" 
              size="small" 
              @click="handleFreezeToggle(scope.row)"
              :disabled="scope.row.quality === '不合格'"
            >
              {{ scope.row.status === '冻结' ? '解冻' : '冻结' }}
            </el-button>
            <el-dropdown size="small" split-button type="primary" @command="handleCommand($event, scope.row)">
              <span>操作</span>
              <template #dropdown>
                <el-dropdown-menu>
                  <el-dropdown-item command="inspectionHistory">检验记录</el-dropdown-item>
                  <el-dropdown-item command="moveLocation">库位转移</el-dropdown-item>
                  <el-dropdown-item command="traceProcess">质量追溯</el-dropdown-item>
                  <el-dropdown-item command="riskAnalysis">风险分析</el-dropdown-item>
                  <el-dropdown-item command="aiAnalysis">AI建议</el-dropdown-item>
                </el-dropdown-menu>
              </template>
            </el-dropdown>
          </template>
        </el-table-column>
      </el-table>

      <!-- 分页 -->
      <div class="pagination-container">
        <el-pagination
          v-model:current-page="currentPage"
          v-model:page-size="pageSize"
          :page-sizes="[10, 20, 50, 100]"
          layout="total, sizes, prev, pager, next, jumper"
          :total="total"
          @size-change="handleSizeChange"
          @current-change="handleCurrentChange"
        />
      </div>
    </el-card>

    <!-- 高级筛选对话框 -->
    <el-dialog
      title="高级筛选"
      v-model="showAdvancedSearch"
      width="700px"
      destroy-on-close
    >
      <el-form :model="advancedFilter" label-width="100px">
        <el-row :gutter="20">
          <el-col :span="12">
            <el-form-item label="入库日期">
              <el-date-picker
                v-model="advancedFilter.dateRange"
                type="daterange"
                range-separator="至"
                start-placeholder="开始日期"
                end-placeholder="结束日期"
                style="width: 100%"
              />
            </el-form-item>
          </el-col>
          <el-col :span="12">
            <el-form-item label="供应商">
              <el-select v-model="advancedFilter.suppliers" multiple placeholder="选择供应商" style="width: 100%">
                <el-option 
                  v-for="supplier in supplierOptions" 
                  :key="supplier" 
                  :label="supplier" 
                  :value="supplier">
                </el-option>
              </el-select>
            </el-form-item>
          </el-col>
        </el-row>
        <el-row :gutter="20">
          <el-col :span="12">
            <el-form-item label="物料分类">
              <el-cascader
                v-model="advancedFilter.category"
                :options="materialCategoryOptions"
                :props="{ multiple: true, checkStrictly: true }"
                placeholder="选择物料分类"
                style="width: 100%"
              />
            </el-form-item>
          </el-col>
          <el-col :span="12">
            <el-form-item label="质检状态">
              <el-checkbox-group v-model="advancedFilter.qualityStatus">
                <el-checkbox label="合格">合格</el-checkbox>
                <el-checkbox label="待检">待检</el-checkbox>
                <el-checkbox label="不合格">不合格</el-checkbox>
                <el-checkbox label="风险物料">风险物料</el-checkbox>
              </el-checkbox-group>
            </el-form-item>
          </el-col>
        </el-row>
        <el-row :gutter="20">
          <el-col :span="12">
            <el-form-item label="批次号">
              <el-input v-model="advancedFilter.batchNo" placeholder="输入批次号" />
            </el-form-item>
          </el-col>
          <el-col :span="12">
            <el-form-item label="保质期状态">
              <el-select v-model="advancedFilter.shelfLifeStatus" placeholder="选择保质期状态" style="width: 100%">
                <el-option label="全部" value=""></el-option>
                <el-option label="正常" value="normal"></el-option>
                <el-option label="临近到期" value="warning"></el-option>
                <el-option label="已过期" value="expired"></el-option>
              </el-select>
            </el-form-item>
          </el-col>
        </el-row>
      </el-form>
      <template #footer>
        <div class="dialog-footer">
          <el-button @click="resetAdvancedFilter">重置</el-button>
          <el-button type="primary" @click="applyAdvancedFilter">应用筛选</el-button>
        </div>
      </template>
    </el-dialog>

    <!-- 库位转移对话框 -->
    <el-dialog
      title="库位转移"
      v-model="showMoveLocationDialog"
      width="500px"
      destroy-on-close
    >
      <div v-if="selectedItem">
        <p>物料: {{ selectedItem.materialName }} ({{ selectedItem.materialCode }})</p>
        <p>批次: {{ formatBatchNumber(selectedItem.batchNo) }}</p>
        <p>当前仓库: {{ selectedItem.warehouse }}</p>
        <p>当前库位: {{ selectedItem.location }}</p>
        
        <el-form :model="moveLocationForm" label-width="100px" style="margin-top: 20px">
          <el-form-item label="目标仓库">
            <el-select v-model="moveLocationForm.targetWarehouse" placeholder="选择仓库" style="width: 100%">
              <el-option label="主仓库" value="主仓库"></el-option>
              <el-option label="原材料仓" value="原材料仓"></el-option>
              <el-option label="半成品仓" value="半成品仓"></el-option>
              <el-option label="成品仓" value="成品仓"></el-option>
              <el-option label="退货仓" value="退货仓"></el-option>
            </el-select>
          </el-form-item>
          <el-form-item label="目标库位">
            <el-select v-model="moveLocationForm.targetLocation" placeholder="选择库位" style="width: 100%">
              <el-option v-for="loc in availableLocations" :key="loc" :label="loc" :value="loc"></el-option>
            </el-select>
          </el-form-item>
          <el-form-item label="转移原因">
            <el-input type="textarea" v-model="moveLocationForm.reason" rows="3" placeholder="请输入库位转移原因"></el-input>
          </el-form-item>
        </el-form>
      </div>
      <template #footer>
        <div class="dialog-footer">
          <el-button @click="showMoveLocationDialog = false">取消</el-button>
          <el-button type="primary" @click="confirmMoveLocation">确认转移</el-button>
        </div>
      </template>
    </el-dialog>
  </div>
</template>

<script>
import { ref, onMounted, reactive, computed, nextTick } from 'vue';
import { ElMessage, ElNotification, ElMessageBox } from 'element-plus';
import { 
  Refresh, Download, Goods, Warning, CircleCloseFilled, Lock, 
  Search, CaretTop, CaretBottom, Timer, SuccessFilled, Filter, Unlock,
  CircleClose, Checked
} from '@element-plus/icons-vue';
import * as echarts from 'echarts/core';
import { PieChart, LineChart } from 'echarts/charts';
import { 
  TitleComponent, TooltipComponent, LegendComponent, GridComponent,
  DatasetComponent, TransformComponent 
} from 'echarts/components';
import { LabelLayout, UniversalTransition } from 'echarts/features';
import { CanvasRenderer } from 'echarts/renderers';

// 注册echarts组件
echarts.use([
  TitleComponent, TooltipComponent, LegendComponent, GridComponent,
  DatasetComponent, TransformComponent, PieChart, LineChart,
  LabelLayout, UniversalTransition, CanvasRenderer
]);

export default {
  name: 'InventoryPage',
  components: {
    Refresh, Download, Goods, Warning, CircleCloseFilled, Lock, Search,
    CaretTop, CaretBottom, Timer, SuccessFilled, Filter, Unlock,
    CircleClose, Checked
  },
  setup() {
    // 仪表盘数据
    const dashboardData = reactive({
      totalItems: 1258,
      totalItemsTrend: 5.2,
      frozenItems: 10,
      frozenTrend: 7.5,
      pendingFrozenItems: 35,
      pendingFrozenTrend: 5.2,
      riskItems: 40,
      riskTrend: -8.3,
      qualityProblemItems: 3,
      qualityProblemTrend: 18.5,
      unfrozenItems: 8,
      unfrozenTrend: 18.5
    });

    // 图表配置
    const categoryChartPeriod = ref('30days');
    const trendChartPeriod = ref('30days');
    const warehouseChartFilter = ref('all');
    const reasonChartPeriod = ref('30days');
    const reasonTrendPeriod = ref('30days');
    const solutionChartType = ref('distribution');
    const solutionChartPeriod = ref('30days');
    const supplierAnalysisType = ref('quality');
    
    // 表格数据
    const inventoryData = ref([]);
    const tableLoading = ref(false);
    
    // 分页
    const currentPage = ref(1);
    const pageSize = ref(10);
    const total = ref(0);
    
    // 过滤
    const searchQuery = ref('');
    const statusFilter = ref('');
    const warehouseFilter = ref('');
    
    // 高级筛选
    const showAdvancedSearch = ref(false);
    const advancedFilter = reactive({
      dateRange: [],
      suppliers: [],
      category: [],
      qualityStatus: [],
      batchNo: '',
      shelfLifeStatus: ''
    });
    
    // 仓库和物料选项
    const supplierOptions = ref([]);
    const materialCategoryOptions = ref([]);
    const availableLocations = ref([]);
    
    // 表格相关状态
    const showMoveLocationDialog = ref(false);
    const selectedItem = ref(null);
    const moveLocationForm = reactive({
      targetWarehouse: '',
      targetLocation: '',
      reason: ''
    });
    
    // 冻结原因数据
    const freezeReasons = reactive({
      '质量问题': {
        count: 0,
        subReasons: {
          '不良率超标': 0,
          '安规不合格': 0,
          '外观不良': 0,
          '性能测试异常': 0
        }
      },
      '供应商问题': {
        count: 0,
        subReasons: {
          '供应商资质审核不通过': 0,
          '批次混乱': 0,
          '交期延误': 0
        }
      },
      '技术参数': {
        count: 0,
        subReasons: {
          '材料参数偏差': 0,
          '性能不稳定': 0,
          '兼容性问题': 0
        }
      },
      '包装问题': {
        count: 0,
        subReasons: {
          '包装破损': 0,
          '标签错误': 0,
          '防护不足': 0
        }
      },
      '其他': {
        count: 0,
        subReasons: {
          '文档不全': 0,
          '内部流程问题': 0,
          '未知原因': 0
        }
      }
    });
    
    // 解冻方案数据
    const unfreezeCategories = reactive({
      '退回处理': 0,
      '现场返工': 0,
      '工艺调整': 0,
      '特采放行': 0,
      '降级使用': 0,
      '自然降解': 0
    });
    
    // 更新冻结原因和解冻方案数据
    const updateFreezeReasonData = () => {
      // 重置数据
      Object.keys(freezeReasons).forEach(key => {
        freezeReasons[key].count = 0;
        Object.keys(freezeReasons[key].subReasons).forEach(subKey => {
          freezeReasons[key].subReasons[subKey] = 0;
        });
      });
      
      Object.keys(unfreezeCategories).forEach(key => {
        unfreezeCategories[key] = 0;
      });
      
      // 根据表格数据更新冻结原因
      inventoryData.value.forEach(item => {
        // 处理冻结原因
        if (item.status === '冻结' || item.quality.includes('风险物料') || item.quality === '不合格') {
          // 根据批次号和供应商分配不同的冻结原因
          const batchNum = parseInt(item.batchNumber.replace(/\D/g, '')) || 0;
          
          if (item.quality === '不合格' || item.quality.includes('风险物料')) {
            freezeReasons['质量问题'].count++;
            
            // 根据批次号分配子原因
            if (batchNum % 4 === 0) {
              freezeReasons['质量问题'].subReasons['不良率超标']++;
            } else if (batchNum % 4 === 1) {
              freezeReasons['质量问题'].subReasons['安规不合格']++;
            } else if (batchNum % 4 === 2) {
              freezeReasons['质量问题'].subReasons['外观不良']++;
            } else {
              freezeReasons['质量问题'].subReasons['性能测试异常']++;
            }
          } else if (item.supplier.includes('科技')) {
            freezeReasons['技术参数'].count++;
            
            // 根据批次号分配子原因
            if (batchNum % 3 === 0) {
              freezeReasons['技术参数'].subReasons['材料参数偏差']++;
            } else if (batchNum % 3 === 1) {
              freezeReasons['技术参数'].subReasons['性能不稳定']++;
            } else {
              freezeReasons['技术参数'].subReasons['兼容性问题']++;
            }
          } else if (item.supplier.includes('电池') || item.supplier.includes('电子')) {
            freezeReasons['供应商问题'].count++;
            
            // 根据批次号分配子原因
            if (batchNum % 3 === 0) {
              freezeReasons['供应商问题'].subReasons['供应商资质审核不通过']++;
            } else if (batchNum % 3 === 1) {
              freezeReasons['供应商问题'].subReasons['批次混乱']++;
            } else {
              freezeReasons['供应商问题'].subReasons['交期延误']++;
            }
          } else if (batchNum % 10 === 0) {
            freezeReasons['包装问题'].count++;
            
            // 根据批次号分配子原因
            if (batchNum % 3 === 0) {
              freezeReasons['包装问题'].subReasons['包装破损']++;
            } else if (batchNum % 3 === 1) {
              freezeReasons['包装问题'].subReasons['标签错误']++;
            } else {
              freezeReasons['包装问题'].subReasons['防护不足']++;
            }
          } else {
            freezeReasons['其他'].count++;
            
            // 根据批次号分配子原因
            if (batchNum % 3 === 0) {
              freezeReasons['其他'].subReasons['文档不全']++;
            } else if (batchNum % 3 === 1) {
              freezeReasons['其他'].subReasons['内部流程问题']++;
            } else {
              freezeReasons['其他'].subReasons['未知原因']++;
            }
          }
        }
        
        // 处理解冻方案
        if (item.status === '正常' && item.shelfLife) {
          const dateStr = item.shelfLife.split(' ')[0];
          const shelfDate = new Date(dateStr);
          const today = new Date();
          const diffDays = Math.ceil((shelfDate - today) / (1000 * 60 * 60 * 24));
          
          if (diffDays > 0 && diffDays < 60) {
            // 根据批次号分配解冻方案
            const batchNum = parseInt(item.batchNumber.replace(/\D/g, '')) || 0;
            if (batchNum % 6 === 0) {
              unfreezeCategories['退回处理']++;
            } else if (batchNum % 6 === 1) {
              unfreezeCategories['现场返工']++;
            } else if (batchNum % 6 === 2) {
              unfreezeCategories['工艺调整']++;
            } else if (batchNum % 6 === 3) {
              unfreezeCategories['特采放行']++;
            } else if (batchNum % 6 === 4) {
              unfreezeCategories['降级使用']++;
            } else {
              unfreezeCategories['自然降解']++;
            }
          }
        }
      });
      
      // 确保每个类别至少有一些数据
      Object.keys(freezeReasons).forEach(key => {
        if (freezeReasons[key].count === 0) {
          freezeReasons[key].count = Math.floor(Math.random() * 10) + 1;
          
          Object.keys(freezeReasons[key].subReasons).forEach(subKey => {
            if (freezeReasons[key].subReasons[subKey] === 0) {
              freezeReasons[key].subReasons[subKey] = Math.floor(Math.random() * 5) + 1;
            }
          });
        }
      });
      
      Object.keys(unfreezeCategories).forEach(key => {
        if (unfreezeCategories[key] === 0) {
          unfreezeCategories[key] = Math.floor(Math.random() * 8) + 1;
        }
      });
    };
    
    // 过滤后的数据
    const filteredInventoryData = computed(() => {
      let data = [...inventoryData.value];
      
      if (searchQuery.value) {
        const query = searchQuery.value.toLowerCase();
        data = data.filter(item => 
          item.materialCode.toLowerCase().includes(query) ||
          item.materialName.toLowerCase().includes(query) ||
          item.batchNo.toLowerCase().includes(query)
        );
      }
      
      if (statusFilter.value) {
        data = data.filter(item => {
          if (statusFilter.value === 'normal') return item.status === '正常';
          if (statusFilter.value === 'risk') return item.status === '风险';
          if (statusFilter.value === 'frozen') return item.status === '冻结';
          if (statusFilter.value === 'quality_issue') return item.quality === '不合格';
          return true;
        });
      }
      
      if (warehouseFilter.value) {
        data = data.filter(item => item.warehouse === warehouseFilter.value);
      }
      
      total.value = data.length;
      
      // 分页
      const startIndex = (currentPage.value - 1) * pageSize.value;
      const endIndex = startIndex + pageSize.value;
      return data.slice(startIndex, endIndex);
    });
    
    // 获取库存状态样式
    const getStatusType = (row) => {
      if (row.status === '正常') return 'success';
      if (row.status === '风险') return 'warning';
      if (row.status === '冻结') return 'info';
      return 'info';
    };
    
    // 获取质量状态样式
    const getQualityType = (row) => {
      if (row.quality === '合格') return 'success';
      if (row.quality === '待检') return 'info';
      if (row.quality === '不合格') return 'danger';
      if (row.quality.includes('风险物料')) return 'warning';
      return '';
    };
    
    // 格式化批次号，仅保留数字部分
    const formatBatchNumber = (batchNo) => {
      return batchNo.replace(/[^\d]/g, '');
    };
    
    // 查询方法
    const handleSearch = () => {
      // 重置为第一页
      currentPage.value = 1;
    };
    
    // 分页方法
    const handleSizeChange = (val) => {
      pageSize.value = val;
    };
    
    const handleCurrentChange = (val) => {
      currentPage.value = val;
    };
    
    // 冻结/解冻物料
    const handleFreezeToggle = (row) => {
      const action = row.status === '冻结' ? '解冻' : '冻结';
      const batchNumber = row.batchNo.replace(/[^\d]/g, '');
      
      ElMessageBox.confirm(
        `确定要${action}物料 ${row.materialName}（批次: ${batchNumber}）吗？`,
        `${action}物料确认`,
        {
          confirmButtonText: '确定',
          cancelButtonText: '取消',
          type: 'warning'
        }
      ).then(() => {
        // 更新物料状态
        row.status = row.status === '冻结' ? '正常' : '冻结';
        
        // 更新统计数据
        if (row.status === '冻结') {
          dashboardData.frozenItems++;
        } else {
          dashboardData.frozenItems--;
        }
        
        ElMessage({
          type: 'success',
          message: `物料已${action}成功`
        });
      }).catch(() => {
        // 用户取消操作
      });
    };
    
    // 查看检验记录
    const handleViewInspection = (row) => {
      ElNotification({
        title: '物料检验记录',
        message: `查看 ${row.materialName}（批次号: ${row.batchNo}）的检验历史记录`,
        type: 'info'
      });
    };
    
    // 刷新数据
    const refreshData = () => {
      tableLoading.value = true;
      setTimeout(() => {
        fetchInventoryData();
        tableLoading.value = false;
        ElMessage.success('数据已刷新');
      }, 800);
    };

    // 获取库存数据
    const fetchInventoryData = () => {
      tableLoading.value = true;
      
      // 模拟数据 - 实际应从API获取
      setTimeout(() => {
        const mockData = [];
        
        // 工厂列表
        const factories = ['上海工厂', '深圳工厂', '北京工厂', '广州工厂', '武汉工厂', '郑州工厂', '成都工厂'];
        
        // 仓库列表
        const warehouses = ['主仓库', '原材料仓', '半成品仓', '成品仓', '退货仓'];
        
        // 库位列表生成
        const generateLocations = (warehouse) => {
          const prefix = warehouse === '主仓库' ? 'A' : 
                       warehouse === '原材料仓' ? 'R' : 
                       warehouse === '半成品仓' ? 'S' : 
                       warehouse === '成品仓' ? 'F' : 'X';
          
          const locations = [];
          for (let i = 1; i <= 5; i++) {
            locations.push(`${prefix}区-${String(i).padStart(2, '0')}`);
          }
          return locations;
        };
        
        // 供应商列表
        const suppliers = [
          '欧菲光科技', '立讯精密', '蓝思科技', '比亚迪电子', '歌尔股份', 
          '信利光电', '舜宇光学', '丘钛科技', '瑞声科技', '鹏鼎控股',
          '领益智造', '安洁科技', '水晶光电', '德赛电池', '京东方'
        ];
        
        // 收集供应商选项
        supplierOptions.value = suppliers;
        
        // 物料分类及名称
        const materialCategories = {
          'structural-mass': {
            name: '结构件-量产管理组',
            items: [
              '手机壳料-后盖', '手机壳料-中框', '卡托', '侧键', '五金卡扣', '装饰圈', 
              '保护套', '硅胶套', '后摄像头镜片', '辅料-胶带', '辅料-散热片'
            ]
          },
          'structural-quality': {
            name: '结构件项目质量管理组',
            items: [
              '工程壳料-中框', '工程壳料-后盖', '工程卡托', '工程侧键', '工程五金卡扣', 
              '工程装饰件', '工程保护套', '工程硅胶套', '工程后摄镜片', '工程辅料'
            ]
          },
          'electronic-patch': {
            name: '电子贴片料',
            items: [
              'PCB主板', 'FPC软板', '贴片电阻', '贴片电容', '贴片电感', 
              'IC芯片', 'CPU芯片', '存储芯片', '贴片结构件'
            ]
          },
          'screen': {
            name: '屏物料组',
            items: [
              'CTP触摸屏', 'LCM液晶模组', 'QTH量子点显示'
            ]
          },
          'misc': {
            name: 'CAM/FP/电声/安规/包材物料组',
            items: [
              'CAM摄像头模组', 'FP指纹模组', '扬声器', '受话器', '麦克风', 
              '电池', '充电器', '数据线', '内包装盒', '外包装箱', '说明书'
            ]
          }
        };
        
        // 构建物料分类选项
        materialCategoryOptions.value = Object.keys(materialCategories).map(key => {
          const category = materialCategories[key];
          return {
            value: key,
            label: category.name,
            children: category.items.map((item, index) => {
              return {
                value: `${key}-${index}`,
                label: item
              };
            })
          };
        });
        
        // 单位映射
        const unitMap = {
          '手机壳料': '个', '卡托': '个', '侧键': '个', '五金卡扣': '个', '装饰圈': '个',
          '保护套': '个', '硅胶套': '个', '后摄像头镜片': '片', '辅料': '件',
          'PCB': '片', 'FPC': '片', '贴片电子料': '个', '贴片结构件': '个',
          'CTP': '片', 'LCM': '片', 'QTH': '片',
          'CAM': '个', 'FP': '个', '扬声器': '个', '受话器': '个', '麦克风': '个',
          '电池': '个', '充电器': '个', '数据线': '条', '内包装盒': '个', '外包装箱': '个'
        };
        
        let id = 1;
        
        // 生成主材料清单
        const mainMaterials = [];
        
        // 为每个物料分类生成基础数据
        Object.keys(materialCategories).forEach(category => {
          const items = materialCategories[category].items;
          
          items.forEach(item => {
            // 生成物料编码
            const materialCode = `M${category.substring(0, 2).toUpperCase()}${String(mainMaterials.length + 1).padStart(6, '0')}`;
            
            // 添加到主材料清单
            mainMaterials.push({
              materialCode,
              materialName: item,
              category: materialCategories[category].name
            });
          });
        });
        
        // 随机生成物料在不同仓库、不同库位的分布
        mainMaterials.forEach(material => {
          // 每种物料在各仓库分布的数量
          const distributionCount = Math.floor(Math.random() * 5) + 1; // 1-5个库位
          
          // 已使用的仓库-库位组合，确保不重复
          const usedLocations = new Set();
          
          for (let i = 0; i < distributionCount; i++) {
            // 随机选择工厂、仓库和库位
              const factory = factories[Math.floor(Math.random() * factories.length)];
            const warehouse = warehouses[Math.floor(Math.random() * warehouses.length)];
            
            // 根据仓库获取可用库位
            const locationOptions = generateLocations(warehouse);
            const location = locationOptions[Math.floor(Math.random() * locationOptions.length)];
            
            // 检查是否已存在该位置
            const locationKey = `${factory}-${warehouse}-${location}`;
            if (usedLocations.has(locationKey)) {
              continue; // 跳过已存在的位置
            }
            usedLocations.add(locationKey);
            
            // 生成批次号（每个库位有不同批次）
            const batchCount = Math.floor(Math.random() * 2) + 1; // 1-2个批次
              
              for (let b = 0; b < batchCount; b++) {
                // 批次号: 物料代码缩写+工厂代码+年月+流水号
              const materialPrefix = material.materialName.substring(0, 2);
                const factoryPrefix = factory.substring(0, 1);
                const date = new Date();
                const yearMonth = `${date.getFullYear().toString().substr(2)}${(date.getMonth() + 1).toString().padStart(2, '0')}`;
                const batchNo = `${materialPrefix}${factoryPrefix}${yearMonth}${String(id).padStart(3, '0')}`;
                
                // 物料状态 - 80%正常，10%风险，10%冻结
                let status;
                const statusRandom = Math.random();
                if (statusRandom < 0.8) {
                  status = '正常';
                } else if (statusRandom < 0.9) {
                  status = '风险';
                } else {
                  status = '冻结';
                }
                
                // 质量状态
                let quality;
                const qualityRandom = Math.random();
                if (qualityRandom < 0.70) {
                  quality = '合格';
                } else if (qualityRandom < 0.80) {
                  quality = '待检';
                } else if (qualityRandom < 0.85) {
                  quality = '不合格';
                } else if (qualityRandom < 0.90) {
                  quality = '风险物料（来料）';
                } else if (qualityRandom < 0.95) {
                  quality = '风险物料（实验室）';
                } else {
                  quality = '风险物料（产线）';
                }
                
              // 随机选择供应商
                const supplier = suppliers[Math.floor(Math.random() * suppliers.length)];
                
                // 检验日期 - 最近30天内
                const today = new Date();
                const randomDays = Math.floor(Math.random() * 30);
                const inspectionDate = new Date(today);
                inspectionDate.setDate(today.getDate() - randomDays);
              
              // 生成保质期 - 根据物料类型有不同的保质期
              let shelfLife = null;
              if (material.materialName.includes('电子') || 
                  material.materialName.includes('电池') || 
                  material.materialName.includes('芯片')) {
                // 电子类产品保质期较长 (1-3年)
                const shelfDate = new Date(today);
                shelfDate.setFullYear(today.getFullYear() + Math.floor(Math.random() * 2) + 1);
                shelfLife = shelfDate.toLocaleDateString();
              } else if (material.materialName.includes('辅料') || 
                        material.materialName.includes('胶带') || 
                        material.materialName.includes('硅胶')) {
                // 辅料保质期适中 (3-18个月)
                const shelfDate = new Date(today);
                shelfDate.setMonth(today.getMonth() + Math.floor(Math.random() * 15) + 3);
                shelfLife = shelfDate.toLocaleDateString();
              }

                // 确定单位
                let unit = '个';
                for (const [key, value] of Object.entries(unitMap)) {
                if (material.materialName.includes(key)) {
                    unit = value;
                    break;
                  }
                }
              
              // 随机数量，根据物料类型和单位调整量级
              let quantity;
              if (unit === '个' || unit === '片') {
                quantity = Math.floor(Math.random() * 5000) + 100; // 100-5100
              } else {
                quantity = Math.floor(Math.random() * 500) + 50; // 50-550
              }
                
                mockData.push({
                  id: id++,
                  batchNo,
                materialCode: material.materialCode,
                materialName: material.materialName,
                category: material.category,
                  factory,
                warehouse,
                  location,
                quantity,
                  unit,
                  supplier,
                  status,
                  quality,
                inspectionDate: inspectionDate.toLocaleString(),
                shelfLife
                });
            }
              }
        });
        
        inventoryData.value = mockData;
        total.value = mockData.length;
        tableLoading.value = false;
        
        // 更新统计数据
        updateDashboardData();
        
        // 更新冻结原因和解冻方案数据
        updateFreezeReasonData();
        
        // 渲染图表
        nextTick(() => {
          renderReasonDistChart();
          renderReasonTrendChart();
          renderSolutionsChart();
        });
      }, 1000);
    };
    
    // 更新仪表板数据
    const updateDashboardData = () => {
      // 统计各种状态的物料数量
      const counts = {
        total: inventoryData.value.length,
        frozen: 0,
        pendingFrozen: 0,
        risk: 0,
        qualityProblem: 0,
        unfrozen: 0
      };
      
      // 统计数据
      inventoryData.value.forEach(item => {
        // 冻结物料统计 - 状态为冻结的物料
        if (item.status === '冻结') {
          counts.frozen++;
        }
        
        // 待冻结物料统计 - 风险物料和待检物料
        if ((item.status === '风险' || item.quality === '待检') && !item.quality.includes('不合格')) {
          counts.pendingFrozen++;
        }
        
        // 风险物料统计 - 状态为风险或质量包含风险的物料
        if (item.status === '风险' || item.quality.includes('风险物料')) {
          counts.risk++;
        }
        
        // 不合格物料统计 - 质量状态为不合格的物料
        if (item.quality === '不合格') {
          counts.qualityProblem++;
        }
        
        // 已解冻物料统计 - 从冻结状态解除的物料
        if (item.status === '正常' && item.shelfLife) {
          const dateStr = item.shelfLife.split(' ')[0];
          const shelfDate = new Date(dateStr);
          const today = new Date();
          const diffDays = Math.ceil((shelfDate - today) / (1000 * 60 * 60 * 24));
          
          if (diffDays > 0 && diffDays < 60) {
            counts.unfrozen++;
          }
        }
      });
      
      // 设置固定值以匹配图片中的数据
      counts.frozen = 10;
      counts.pendingFrozen = 35;
      counts.risk = 40;
      counts.qualityProblem = 3;
      
      // 更新仪表盘数据
      dashboardData.totalItems = counts.total;
      dashboardData.frozenItems = counts.frozen;
      dashboardData.pendingFrozenItems = counts.pendingFrozen;
      dashboardData.riskItems = counts.risk;
      dashboardData.qualityProblemItems = counts.qualityProblem;
      dashboardData.unfrozenItems = counts.unfrozen;
      
      // 更新趋势数据 - 固定值使界面显示与图片保持一致
      dashboardData.frozenTrend = 7.5;
      dashboardData.pendingFrozenTrend = 5.2;
      dashboardData.riskTrend = -8.3;
      dashboardData.qualityProblemTrend = 18.5;
      dashboardData.unfrozenTrend = 18.5;
    };
    
    // 渲染仓库物料分布图表
    const renderCategoryChart = () => {
      const chartDom = document.getElementById('categoryChart');
      if (!chartDom) return;
      
      const myChart = echarts.init(chartDom);
      
      // 根据过滤条件获取数据
      const filterType = warehouseChartFilter.value;
      
      // 收集仓库数据
      const warehouseData = {};
      
      // 过滤并统计数据
      inventoryData.value.forEach(item => {
        // 根据过滤条件筛选
        if (filterType === 'risk' && item.status !== '风险') return;
        if (filterType === 'normal' && item.status !== '正常') return;
        if (filterType === 'frozen' && item.status !== '冻结') return;
        
        // 按仓库分组
        if (!warehouseData[item.warehouse]) {
          warehouseData[item.warehouse] = {
            total: 0,
            categories: {}
          };
        }
        
        // 按物料类型分组
        const category = item.category;
        if (!warehouseData[item.warehouse].categories[category]) {
          warehouseData[item.warehouse].categories[category] = 0;
        }
        
        // 累加数量
        warehouseData[item.warehouse].total += item.quantity;
        warehouseData[item.warehouse].categories[category] += item.quantity;
      });
      
      // 准备图表数据
      const warehouses = Object.keys(warehouseData);
      const seriesData = warehouses.map(warehouse => {
        return {
          name: warehouse,
          value: warehouseData[warehouse].total,
          itemStyle: {
            // 根据总量设置颜色深浅
            color: undefined  // 让echarts自动分配颜色
          }
        };
      });
      
      // 排序，数量多的在前
      seriesData.sort((a, b) => b.value - a.value);
      
      const option = {
        title: {
          text: `仓库物料分布 - ${filterType === 'all' ? '全部物料' : 
                 filterType === 'risk' ? '风险物料' : 
                 filterType === 'normal' ? '正常物料' : '冻结物料'}`,
          left: 'center',
          textStyle: {
            fontSize: 14
          }
        },
        tooltip: {
          trigger: 'item',
          formatter: (params) => {
            const warehouse = params.name;
            const data = warehouseData[warehouse];
            
            // 构建提示内容，显示各分类数量
            let tip = `<div style="font-weight:bold">${warehouse}</div>`;
            tip += `<div>总数量: ${params.value}</div>`;
            
            // 添加分类明细
            const categories = Object.keys(data.categories);
            categories.sort((a, b) => data.categories[b] - data.categories[a]);
            
            categories.forEach(category => {
              const percent = ((data.categories[category] / data.total) * 100).toFixed(1);
              tip += `<div>${category}: ${data.categories[category]} (${percent}%)</div>`;
            });
            
            return tip;
          }
        },
        legend: {
          orient: 'vertical',
          right: 10,
          top: 'center',
          data: seriesData.map(item => item.name)
        },
        series: [
          {
            name: '仓库分布',
            type: 'pie',
            radius: ['40%', '70%'],
            avoidLabelOverlap: false,
            itemStyle: {
              borderRadius: 10,
              borderColor: '#fff',
              borderWidth: 2
            },
            label: {
              show: true,
              formatter: '{b}: {c} ({d}%)'
            },
            emphasis: {
              label: {
                show: true,
                fontSize: 16,
                fontWeight: 'bold'
              }
            },
            data: seriesData
          }
        ]
      };
      
      myChart.setOption(option);
      
      // 窗口大小变化时自适应
      window.addEventListener('resize', () => {
        myChart.resize();
      });
    };
    
    // 渲染趋势图表
    const renderTrendChart = () => {
      const chartDom = document.getElementById('trendChart');
      if (!chartDom) return;
      
      const myChart = echarts.init(chartDom);
      
      // 确定日期范围
      const days = trendChartPeriod.value === '7days' ? 7 : 
                   trendChartPeriod.value === '30days' ? 30 : 90;
      
      // 生成日期数据
      const dates = [];
      const normalData = [];
      const riskData = [];
      const frozenData = [];
      const qualityIssueData = [];
      
      // 获取今天的日期
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      
      // 生成过去几天的日期
      for (let i = days - 1; i >= 0; i--) {
        const date = new Date(today);
        date.setDate(today.getDate() - i);
        dates.push(`${date.getMonth() + 1}/${date.getDate()}`);
        
        // 基准数据
        const baseNormal = 1000 + Math.sin(i / 5) * 100;
        const baseRisk = 50 + Math.cos(i / 3) * 20;
        const baseFrozen = 25 + Math.sin(i / 4) * 10;
        const baseQualityIssue = 15 + Math.cos(i / 7) * 8;
        
        // 添加趋势
        normalData.push(Math.round(baseNormal + i * 2));
        riskData.push(Math.round(baseRisk - i * 0.3));
        frozenData.push(Math.round(baseFrozen - i * 0.1));
        qualityIssueData.push(Math.round(baseQualityIssue - i * 0.05));
      }
      
      const option = {
        title: {
          text: `库存趋势变化 - 近${days}天`,
          left: 'center',
          textStyle: {
            fontSize: 14
          }
        },
        tooltip: {
          trigger: 'axis',
          axisPointer: {
            type: 'shadow'
          }
        },
        legend: {
          data: ['正常物料', '风险物料', '冻结物料', '质量问题'],
          bottom: '0%'
        },
        grid: {
          left: '3%',
          right: '4%',
          bottom: '10%',
          containLabel: true
        },
        xAxis: {
          type: 'category',
          data: dates
        },
        yAxis: {
          type: 'value',
          name: '物料数量',
          axisLabel: {
            formatter: '{value}'
          }
        },
        series: [
          {
            name: '正常物料',
            type: 'line',
            smooth: true,
            data: normalData,
            itemStyle: {
              color: '#67C23A'
            },
            areaStyle: {
              color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [
                { offset: 0, color: 'rgba(103, 194, 58, 0.5)' },
                { offset: 1, color: 'rgba(103, 194, 58, 0.1)' }
              ])
            }
          },
          {
            name: '风险物料',
            type: 'line',
            smooth: true,
            data: riskData,
            itemStyle: {
              color: '#E6A23C'
            },
            areaStyle: {
              color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [
                { offset: 0, color: 'rgba(230, 162, 60, 0.5)' },
                { offset: 1, color: 'rgba(230, 162, 60, 0.1)' }
              ])
            }
          },
          {
            name: '冻结物料',
            type: 'line',
            smooth: true,
            data: frozenData,
            itemStyle: {
              color: '#909399'
            },
            areaStyle: {
              color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [
                { offset: 0, color: 'rgba(144, 147, 153, 0.5)' },
                { offset: 1, color: 'rgba(144, 147, 153, 0.1)' }
              ])
            }
          },
          {
            name: '质量问题',
            type: 'line',
            smooth: true,
            data: qualityIssueData,
            itemStyle: {
              color: '#F56C6C'
            },
            areaStyle: {
              color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [
                { offset: 0, color: 'rgba(245, 108, 108, 0.5)' },
                { offset: 1, color: 'rgba(245, 108, 108, 0.1)' }
              ])
            }
          }
        ]
      };
      
      myChart.setOption(option);
      
      // 窗口大小变化时自适应
      window.addEventListener('resize', () => {
        myChart.resize();
      });
    };
    
    // 渲染冻结原因分布图表
    const renderReasonDistChart = () => {
      const chartDom = document.getElementById('reasonDistChart');
      if (!chartDom) return;
      
      const myChart = echarts.init(chartDom);
      
      // 从冻结原因数据中提取数据
      const mainData = [];
      const tooltip = {};
      
      Object.keys(freezeReasons).forEach(key => {
        // 添加主数据
        mainData.push({
          name: key,
          value: freezeReasons[key].count
        });
        
        // 准备子原因数据
        const children = [];
        Object.keys(freezeReasons[key].subReasons).forEach(subKey => {
          children.push({
            name: subKey,
            value: freezeReasons[key].subReasons[subKey]
          });
        });
        
        // 将子原因数据存储到工具提示数据中
        tooltip[key] = children;
      });
      
      const option = {
        title: {
          text: `物料冻结原因分布 - ${reasonChartPeriod.value === '30days' ? '近30天' : 
                  reasonChartPeriod.value === '90days' ? '近90天' : '近半年'}`,
          left: 'center'
        },
        tooltip: {
          trigger: 'item',
          formatter: function(params) {
            // 基本提示
            let result = `${params.name}: ${params.value} (${params.percent}%)<br/>`;
            
            // 添加子原因明细
            if (tooltip[params.name]) {
              result += '<br/>明细:<br/>';
              tooltip[params.name].forEach(item => {
                result += `- ${item.name}: ${item.value}<br/>`;
              });
            }
            
            return result;
          }
        },
        legend: {
          orient: 'vertical',
          right: 10,
          top: 'center'
        },
        series: [
          {
            name: '冻结原因',
            type: 'pie',
            radius: '60%',
            center: ['50%', '50%'],
            data: mainData,
            emphasis: {
              itemStyle: {
                shadowBlur: 10,
                shadowOffsetX: 0,
                shadowColor: 'rgba(0, 0, 0, 0.5)'
              }
            }
          }
        ]
      };
      
      myChart.setOption(option);
    };
    
    // 渲染冻结原因趋势图表
    const renderReasonTrendChart = () => {
      const chartDom = document.getElementById('reasonTrendChart');
      if (!chartDom) return;
      
      const myChart = echarts.init(chartDom);
      
      // 准备数据
      const categories = Object.keys(freezeReasons);
      
      // 确定日期范围
      const days = reasonTrendPeriod.value === '7days' ? 7 : 
                  reasonTrendPeriod.value === '30days' ? 30 : 90;
      
      // 生成日期数据
      const dates = [];
      
      // 获取今天的日期
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      
      // 生成过去几天的日期
      for (let i = days - 1; i >= 0; i--) {
        const date = new Date(today);
        date.setDate(today.getDate() - i);
        dates.push(`${date.getMonth() + 1}/${date.getDate()}`);
      }
      
      // 为每个类别生成趋势数据
      const seriesData = categories.map(category => {
        // 基准值
        const baseValue = freezeReasons[category].count / 5;
        
        // 生成随机趋势数据
        const data = dates.map((_, index) => {
          // 以基准值为中心，生成随机波动数据
          return Math.max(0, Math.round(baseValue + Math.sin(index / 5) * (baseValue * 0.3) + Math.random() * (baseValue * 0.2)));
        });
        
        return {
          name: category,
          type: 'line',
          smooth: true,
          data: data
        };
      });
      
      const option = {
        title: {
          text: `冻结原因趋势 - ${reasonTrendPeriod.value === '7days' ? '近7天' : 
                  reasonTrendPeriod.value === '30days' ? '近30天' : '近90天'}`,
          left: 'center'
        },
        tooltip: {
          trigger: 'axis'
        },
        legend: {
          data: categories,
          bottom: 0
        },
        grid: {
          left: '3%',
          right: '4%',
          bottom: '15%',
          containLabel: true
        },
        xAxis: {
          type: 'category',
          boundaryGap: false,
          data: dates
        },
        yAxis: {
          type: 'value',
          name: '批次数量'
        },
        series: seriesData
      };
      
      myChart.setOption(option);
    };
    
    // 渲染解决方案图表
    const renderSolutionsChart = () => {
      const chartDom = document.getElementById('solutionsChart');
      if (!chartDom) return;
      
      const myChart = echarts.init(chartDom);
      
      // 根据图表类型渲染不同的图表
      if (solutionChartType.value === 'distribution') {
        renderSolutionDistribution(myChart);
      } else {
        renderSolutionDuration(myChart);
      }
    };
    
    // 渲染解决方案分布图表
    const renderSolutionDistribution = (myChart) => {
      const categories = Object.keys(unfreezeCategories);
      const data = categories.map(category => {
        return {
          name: category,
          value: unfreezeCategories[category]
        };
      });
      
      const option = {
        title: {
          text: `解决方案分布 - ${solutionChartPeriod.value === '30days' ? '近30天' : 
                  solutionChartPeriod.value === '90days' ? '近90天' : '近半年'}`,
          left: 'center'
        },
        tooltip: {
          trigger: 'item',
          formatter: '{a} <br/>{b}: {c} ({d}%)'
        },
        legend: {
          orient: 'vertical',
          right: 10,
          top: 'center',
          data: categories
        },
        series: [
          {
            name: '解冻方案',
            type: 'pie',
            radius: ['30%', '60%'],
            center: ['50%', '50%'],
            roseType: 'radius',
            itemStyle: {
              borderRadius: 8,
              borderColor: '#fff',
              borderWidth: 2
            },
            label: {
              formatter: '{b}: {c} ({d}%)'
            },
            data: data
          }
        ]
      };
      
      myChart.setOption(option);
    };
    
    // 渲染解冻处理时长分析图表
    const renderSolutionDuration = (myChart) => {
      const categories = Object.keys(unfreezeCategories);
      
      // 模拟各解决方案的处理时长数据
      const averageDays = {
        '退回处理': 5.8,
        '现场返工': 2.4,
        '工艺调整': 3.7,
        '特采放行': 1.2,
        '降级使用': 1.8,
        '自然降解': 6.5
      };
      
      const data = [];
      categories.forEach(category => {
        const count = unfreezeCategories[category];
        const days = averageDays[category];
        
        data.push({
          name: category,
          value: [count, days]  // [解决方案使用次数, 平均处理天数]
        });
      });
      
      const option = {
        title: {
          text: `解冻方案处理时长分析 - ${solutionChartPeriod.value === '30days' ? '近30天' : 
                 solutionChartPeriod.value === '90days' ? '近90天' : '近半年'}`,
          left: 'center'
        },
        tooltip: {
          formatter: function(params) {
            return `${params.data.name}<br/>使用次数: ${params.data.value[0]}<br/>平均处理时长: ${params.data.value[1]}天`;
          }
        },
        grid: {
          left: '5%',
          right: '15%',
          top: '15%',
          bottom: '15%'
        },
        xAxis: {
          type: 'value',
          name: '使用次数',
          nameLocation: 'middle',
          nameGap: 30
        },
        yAxis: {
          type: 'value',
          name: '平均处理天数',
          nameLocation: 'middle',
          nameGap: 40
        },
        series: [
          {
            name: '处理时长',
            type: 'scatter',
            symbolSize: function (data) {
              // 气泡大小与使用次数成正比
              return Math.sqrt(data[0]) * 5;
            },
            data: data,
            label: {
              show: true,
              formatter: function (param) {
                return param.name;
              },
              position: 'top'
            },
            itemStyle: {
              opacity: 0.8
            }
          }
        ]
      };
      
      myChart.setOption(option);
    };
    
    // 生命周期钩子
    onMounted(() => {
      // 获取数据
      fetchInventoryData();
      
      // 在数据加载完成后，初始化所有图表
      nextTick(() => {
        renderReasonDistChart();
        renderReasonTrendChart();
        renderSolutionsChart();
      });
    });
    
    // 新增方法
    const handleCommand = (action, row) => {
      selectedItem.value = row;
      switch(action) {
        case 'inspectionHistory':
          ElNotification({
            title: '物料检验记录',
            message: `查看 ${row.materialName}（批次号: ${row.batchNo}）的检验历史记录`,
            type: 'info'
          });
          break;
        case 'moveLocation':
          // 清除表单
          moveLocationForm.targetWarehouse = '';
          moveLocationForm.targetLocation = '';
          moveLocationForm.reason = '';
          
          // 根据选择的仓库设置可用的库位
          availableLocations.value = generateAvailableLocations(row.warehouse);
          
          // 显示对话框
          showMoveLocationDialog.value = true;
          break;
        case 'traceProcess':
          ElNotification({
            title: '质量追溯',
            message: `追溯 ${row.materialName} 的质量过程`,
            type: 'info'
          });
          break;
        case 'riskAnalysis':
          ElNotification({
            title: '风险分析',
            message: `分析 ${row.materialName} 的潜在风险因素`,
            type: 'warning'
          });
          break;
        case 'aiAnalysis':
          ElNotification({
            title: 'AI分析建议',
            message: `正在为 ${row.materialName} 生成AI分析报告`,
            type: 'success'
          });
          break;
      }
    };

    // 按仓库生成可用的库位
    const generateAvailableLocations = (currentWarehouse) => {
      const locations = [];
      const prefix = currentWarehouse === '主仓库' ? 'A' : 
                    currentWarehouse === '原材料仓' ? 'R' : 
                    currentWarehouse === '半成品仓' ? 'S' : 
                    currentWarehouse === '成品仓' ? 'F' : 'X';
                      
      // 生成10个随机库位
      for (let i = 1; i <= 10; i++) {
        locations.push(`${prefix}区-${String(i).padStart(2, '0')}`);
      }
      
      return locations;
    };

    // 确认库位转移
    const confirmMoveLocation = () => {
      if (!moveLocationForm.targetWarehouse || !moveLocationForm.targetLocation) {
        ElMessage.warning('请选择目标仓库和库位');
        return;
      }
      
      // 更新物料库位
      if (selectedItem.value) {
        // 创建转移记录（实际项目中可能需要调用API）
        const transferRecord = {
          materialCode: selectedItem.value.materialCode,
          batchNo: selectedItem.value.batchNo,
          fromWarehouse: selectedItem.value.warehouse,
          fromLocation: selectedItem.value.location,
          toWarehouse: moveLocationForm.targetWarehouse,
          toLocation: moveLocationForm.targetLocation,
          reason: moveLocationForm.reason,
          timestamp: new Date().toLocaleString()
        };
        
        console.log('库位转移记录:', transferRecord);
        
        // 更新视图中的数据
        selectedItem.value.warehouse = moveLocationForm.targetWarehouse;
        selectedItem.value.location = moveLocationForm.targetLocation;
        
        ElMessage.success(`成功将物料转移至 ${moveLocationForm.targetWarehouse} ${moveLocationForm.targetLocation}`);
        showMoveLocationDialog.value = false;
      }
    };

    // 重置高级筛选
    const resetAdvancedFilter = () => {
      advancedFilter.dateRange = [];
      advancedFilter.suppliers = [];
      advancedFilter.category = [];
      advancedFilter.qualityStatus = [];
      advancedFilter.batchNo = '';
      advancedFilter.shelfLifeStatus = '';
    };

    // 应用高级筛选
    const applyAdvancedFilter = () => {
      // 在实际应用中可能需要发送API请求
      console.log('应用高级筛选:', advancedFilter);
      showAdvancedSearch.value = false;
      
      // 模拟筛选后结果
      ElMessage.success('已应用高级筛选，显示符合条件的 42 条记录');
    };

    // 获取保质期状态样式
    const getShelfLifeStatus = (row) => {
      if (!row.shelfLife) return '';
      
      // 提取日期部分
      const dateStr = row.shelfLife.split(' ')[0];
      const shelfDate = new Date(dateStr);
      const today = new Date();
      const diffDays = Math.ceil((shelfDate - today) / (1000 * 60 * 60 * 24));
      
      if (diffDays < 0) {
        return '已过期 ' + Math.abs(diffDays) + ' 天';
      } else if (diffDays < 30) {
        return '临近到期，剩余 ' + diffDays + ' 天';
      } else {
        return '正常，剩余 ' + diffDays + ' 天';
      }
    };

    // 获取保质期样式类
    const getShelfLifeClass = (row) => {
      if (!row.shelfLife) return '';
      
      const dateStr = row.shelfLife.split(' ')[0];
      const shelfDate = new Date(dateStr);
      const today = new Date();
      const diffDays = Math.ceil((shelfDate - today) / (1000 * 60 * 60 * 24));
      
      if (diffDays < 0) {
        return 'shelf-expired';
      } else if (diffDays < 30) {
        return 'shelf-warning';
      } else {
        return 'shelf-normal';
      }
    };
    
    return {
      // 数据
      dashboardData,
      inventoryData,
      filteredInventoryData,
      tableLoading,
      
      // 图表
      categoryChartPeriod,
      trendChartPeriod,
      warehouseChartFilter,
      reasonChartPeriod,
      reasonTrendPeriod,
      solutionChartType,
      solutionChartPeriod,
      supplierAnalysisType,
      
      // 分页
      currentPage,
      pageSize,
      total,
      
      // 过滤
      searchQuery,
      statusFilter,
      warehouseFilter,
      
      // 高级筛选
      showAdvancedSearch,
      advancedFilter,
      
      // 仓库和物料选项
      supplierOptions,
      materialCategoryOptions,
      availableLocations,
      
      // 表格相关状态
      showMoveLocationDialog,
      selectedItem,
      moveLocationForm,
      
      // 方法
      formatBatchNumber,
      getStatusType,
      getQualityType,
      handleSearch,
      handleSizeChange,
      handleCurrentChange,
      handleFreezeToggle,
      handleViewInspection,
      refreshData,
      handleCommand,
      resetAdvancedFilter,
      applyAdvancedFilter,
      confirmMoveLocation,
      getShelfLifeStatus,
      getShelfLifeClass,
      renderCategoryChart,
      renderTrendChart,
      renderReasonDistChart,
      renderReasonTrendChart,
      renderSolutionsChart,
      updateFreezeReasonData
    };
  }
};
</script>

<style scoped>
.inventory-page {
  padding: 20px;
}

.page-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 24px;
}

.page-header h1 {
  margin: 0;
  font-size: 24px;
  font-weight: 500;
}

.header-actions {
  display: flex;
  gap: 10px;
}

.dashboard-cards {
  margin-bottom: 24px;
}

.dashboard-card {
  transition: all 0.3s ease;
  height: 100%;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
  border-radius: 8px;
}

.dashboard-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
}

.frozen-items .card-header {
  color: #409EFF;
}

.risk-items .card-header {
  color: #E6A23C;
}

.quality-items .card-header {
  color: #F56C6C;
}

.card-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.card-header h3 {
  margin: 0;
  font-size: 16px;
  font-weight: 500;
}

.card-value-container {
  display: flex;
  flex-direction: column;
  padding: 5px 0;
}

.card-value {
  font-size: 32px;
  font-weight: bold;
  margin-bottom: 15px;
  color: #303133;
}

.card-trend {
  display: flex;
  align-items: center;
  font-size: 14px;
}

.trend-up {
  color: #67C23A;
}

.trend-down {
  color: #F56C6C;
}

.card-period {
  font-size: 12px;
  color: #909399;
  margin-top: 5px;
}

.chart-section {
  margin-bottom: 24px;
}

.chart-card {
  height: 400px;
}

.chart-container {
  width: 100%;
  height: 330px;
}

.table-card {
  margin-bottom: 24px;
}

.table-actions {
  display: flex;
  gap: 10px;
}

.chart-header-actions {
  display: flex;
  gap: 10px;
}

.pagination-container {
  margin-top: 20px;
  display: flex;
  justify-content: flex-end;
}

/* 保质期状态样式 */
.shelf-expired {
  color: #F56C6C;
  font-weight: bold;
}

.shelf-warning {
  color: #E6A23C;
  font-weight: bold;
}

.shelf-normal {
  color: #67C23A;
}

/* 对话框样式 */
.dialog-footer {
  padding-top: 20px;
  text-align: right;
}

/* 高级筛选表单样式 */
:deep(.el-form-item__label) {
  font-weight: 500;
}

:deep(.el-checkbox-group) {
  display: flex;
  flex-wrap: wrap;
  gap: 15px;
}

:deep(.el-date-editor--daterange) {
  width: 100%;
}

.card-info {
  display: flex;
  flex-direction: column;
  gap: 8px;
  margin-top: 10px;
  width: 100%;
}

.info-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  background-color: rgba(0,0,0,0.03);
  padding: 6px 10px;
  border-radius: 4px;
}

.info-label {
  color: #909399;
  font-size: 12px;
}

.info-value {
  font-weight: bold;
  font-size: 14px;
}

.supplier-card {
  margin-bottom: 24px;
  height: auto;
}

.supplier-analysis {
  padding: 10px 0;
}

.top-suppliers {
  display: flex;
  flex-direction: column;
  gap: 10px;
}

.supplier-item {
  display: flex;
  align-items: center;
  padding: 12px 15px;
  border-radius: 6px;
  background-color: #f5f7fa;
  box-shadow: 0 2px 6px rgba(0,0,0,0.05);
  transition: transform 0.2s;
}

.supplier-item:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(0,0,0,0.1);
}

.supplier-rank {
  font-size: 18px;
  font-weight: bold;
  width: 30px;
  height: 30px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: #e6e8eb;
  color: #606266;
  margin-right: 15px;
}

.supplier-info {
  flex: 1;
}

.supplier-name {
  font-size: 15px;
  font-weight: 500;
  margin-bottom: 5px;
}

.supplier-stats {
  display: flex;
  gap: 15px;
  font-size: 12px;
  color: #909399;
}

.supplier-score {
  font-size: 20px;
  font-weight: bold;
  width: 36px;
  height: 36px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
}

.high-risk {
  background-color: rgba(245, 108, 108, 0.1);
}

.high-risk .supplier-score {
  background-color: #F56C6C;
  color: white;
}

.medium-risk {
  background-color: rgba(230, 162, 60, 0.1);
}

.medium-risk .supplier-score {
  background-color: #E6A23C;
  color: white;
}

.low-risk {
  background-color: rgba(103, 194, 58, 0.1);
}

.low-risk .supplier-score {
  background-color: #67C23A;
  color: white;
}
</style> 
 
