/**
 * ‰ºòÂåñÂ∑•ÂéÇÊü•ËØ¢ËßÑÂàô
 * ‰øÆÊîπÂ∑•ÂéÇÊü•ËØ¢ÈÄªËæëÔºåÊòæÁ§∫ËØ¶ÁªÜÁöÑÁâ©Êñô‰ø°ÊÅØËÄå‰∏çÊòØÁªüËÆ°Ê±áÊÄª
 */
import mysql from 'mysql2/promise';

const dbConfig = {
  host: 'localhost',
  user: 'root',
  password: 'Zxylsy.99',
  database: 'iqe_inspection'
};

async function optimizeFactoryQueryRules() {
  console.log('üîß ‰ºòÂåñÂ∑•ÂéÇÊü•ËØ¢ËßÑÂàô...');
  
  let connection;
  try {
    connection = await mysql.createConnection(dbConfig);
    console.log('‚úÖ ËøûÊé•Âà∞Êï∞ÊçÆÂ∫ìÊàêÂäüÔºÅ');
    
    // ‰øÆÊîπÂ∑•ÂéÇÂ∫ìÂ≠òÊü•ËØ¢ËßÑÂàô - ÊòæÁ§∫ËØ¶ÁªÜÁâ©Êñô‰ø°ÊÅØËÄå‰∏çÊòØÁªüËÆ°Ê±áÊÄª
    await connection.query(`
      UPDATE nlp_intent_rules 
      SET 
        action_target = ?,
        description = 'Êü•ËØ¢ÁâπÂÆöÂ∑•ÂéÇÁöÑËØ¶ÁªÜÂ∫ìÂ≠òÁâ©Êñô‰ø°ÊÅØ'
      WHERE intent_name = 'Â∑•ÂéÇÂ∫ìÂ≠ò,Â∑•ÂéÇÁâ©Êñô,Êü•ËØ¢Â∑•ÂéÇ,Â∑•ÂéÇÊÉÖÂÜµ'
    `, [`SELECT 
          storage_location as Â∑•ÂéÇ,
          material_code as Áâ©ÊñôÁºñÁ†Å,
          material_name as Áâ©ÊñôÂêçÁß∞,
          batch_code as ÊâπÊ¨°Âè∑,
          supplier_name as ‰æõÂ∫îÂïÜ,
          quantity as Êï∞Èáè,
          status as Áä∂ÊÄÅ,
          risk_level as È£éÈô©Á≠âÁ∫ß,
          DATE_FORMAT(inbound_time, '%Y-%m-%d') as Ê£ÄÈ™åÊó•Êúü,
          DATE_FORMAT(created_at, '%Y-%m-%d') as ÂÖ•Â∫ìÊó•Êúü,
          notes as Â§áÊ≥®
        FROM inventory 
        WHERE storage_location LIKE CONCAT('%', ?, '%')
        ORDER BY created_at DESC LIMIT 20`]);
    
    console.log('‚úÖ Â∑•ÂéÇÂ∫ìÂ≠òÊü•ËØ¢ËßÑÂàôÂ∑≤‰ºòÂåñ');
    
    // Ê∑ªÂä†‰∏Ä‰∏™Êñ∞ÁöÑÂ∑•ÂéÇÁªüËÆ°Êü•ËØ¢ËßÑÂàôÔºàÂ¶ÇÊûúÁî®Êà∑ÊÉ≥Ë¶ÅÁªüËÆ°‰ø°ÊÅØÔºâ
    await connection.query(`
      INSERT INTO nlp_intent_rules (
        intent_name, description, action_type, action_target, 
        parameters, example_query, status, created_at, updated_at
      ) VALUES (?, ?, ?, ?, ?, ?, ?, NOW(), NOW())
    `, [
      'Â∑•ÂéÇÁªüËÆ°,Â∑•ÂéÇÊ±áÊÄª,Â∑•ÂéÇÊ¶ÇÂÜµ,Â∑•ÂéÇÊÄªËßà',
      'Êü•ËØ¢Â∑•ÂéÇÁöÑÁªüËÆ°Ê±áÊÄª‰ø°ÊÅØ',
      'SQL_QUERY',
      `SELECT 
        storage_location as Â∑•ÂéÇ,
        COUNT(*) as Áâ©ÊñôÁßçÁ±ªÊï∞,
        SUM(quantity) as ÊÄªÂ∫ìÂ≠òÈáè,
        COUNT(CASE WHEN status = 'È£éÈô©' THEN 1 END) as È£éÈô©Áâ©ÊñôÊï∞,
        COUNT(CASE WHEN status = 'ÂÜªÁªì' THEN 1 END) as ÂÜªÁªìÁâ©ÊñôÊï∞,
        COUNT(CASE WHEN status = 'Ê≠£Â∏∏' THEN 1 END) as Ê≠£Â∏∏Áâ©ÊñôÊï∞,
        GROUP_CONCAT(DISTINCT supplier_name ORDER BY supplier_name SEPARATOR ', ') as ‰æõÂ∫îÂïÜÂàóË°®,
        GROUP_CONCAT(DISTINCT material_name ORDER BY material_name SEPARATOR ', ') as Áâ©ÊñôÊ∏ÖÂçï
      FROM inventory 
      WHERE storage_location LIKE CONCAT('%', ?, '%')
      GROUP BY storage_location`,
      JSON.stringify([
        {
          name: 'factory_name',
          type: 'string',
          description: 'Â∑•ÂéÇÂêçÁß∞',
          extract_patterns: [
            'ÈáçÂ∫ÜÂ∑•ÂéÇ',
            'Ê∑±Âú≥Â∑•ÂéÇ',
            'ÂçóÊòåÂ∑•ÂéÇ',
            'ÂÆúÂÆæÂ∑•ÂéÇ'
          ]
        }
      ]),
      'Êü•ËØ¢ÈáçÂ∫ÜÂ∑•ÂéÇÁöÑÁªüËÆ°Ê¶ÇÂÜµ',
      'active'
    ]);
    
    console.log('‚úÖ Ê∑ªÂä†Â∑•ÂéÇÁªüËÆ°Êü•ËØ¢ËßÑÂàô');
    
    // ÂêåÊ†∑‰ºòÂåñ‰æõÂ∫îÂïÜÊü•ËØ¢ËßÑÂàô - ÊòæÁ§∫ËØ¶ÁªÜÁâ©Êñô‰ø°ÊÅØ
    await connection.query(`
      UPDATE nlp_intent_rules 
      SET 
        action_target = ?,
        description = 'Êü•ËØ¢ÁâπÂÆö‰æõÂ∫îÂïÜÁöÑËØ¶ÁªÜÂ∫ìÂ≠òÁâ©Êñô‰ø°ÊÅØ'
      WHERE intent_name = '‰æõÂ∫îÂïÜÂ∫ìÂ≠ò,Êü•ËØ¢‰æõÂ∫îÂïÜ,‰æõÂ∫îÂïÜÁâ©Êñô,‰æõÂ∫îÂïÜÊÉÖÂÜµ'
    `, [`SELECT 
          supplier_name as ‰æõÂ∫îÂïÜ,
          material_code as Áâ©ÊñôÁºñÁ†Å,
          material_name as Áâ©ÊñôÂêçÁß∞,
          batch_code as ÊâπÊ¨°Âè∑,
          storage_location as Â∑•ÂéÇ,
          quantity as Êï∞Èáè,
          status as Áä∂ÊÄÅ,
          risk_level as È£éÈô©Á≠âÁ∫ß,
          DATE_FORMAT(inbound_time, '%Y-%m-%d') as Ê£ÄÈ™åÊó•Êúü,
          DATE_FORMAT(created_at, '%Y-%m-%d') as ÂÖ•Â∫ìÊó•Êúü,
          notes as Â§áÊ≥®
        FROM inventory 
        WHERE supplier_name LIKE CONCAT('%', ?, '%')
        ORDER BY created_at DESC LIMIT 20`]);
    
    console.log('‚úÖ ‰æõÂ∫îÂïÜÊü•ËØ¢ËßÑÂàôÂ∑≤‰ºòÂåñ');
    
    // Ê∑ªÂä†‰æõÂ∫îÂïÜÁªüËÆ°Êü•ËØ¢ËßÑÂàô
    await connection.query(`
      INSERT INTO nlp_intent_rules (
        intent_name, description, action_type, action_target, 
        parameters, example_query, status, created_at, updated_at
      ) VALUES (?, ?, ?, ?, ?, ?, ?, NOW(), NOW())
    `, [
      '‰æõÂ∫îÂïÜÁªüËÆ°,‰æõÂ∫îÂïÜÊ±áÊÄª,‰æõÂ∫îÂïÜÊ¶ÇÂÜµ,‰æõÂ∫îÂïÜÊÄªËßà',
      'Êü•ËØ¢‰æõÂ∫îÂïÜÁöÑÁªüËÆ°Ê±áÊÄª‰ø°ÊÅØ',
      'SQL_QUERY',
      `SELECT 
        supplier_name as ‰æõÂ∫îÂïÜ,
        COUNT(*) as Áâ©ÊñôÁßçÁ±ªÊï∞,
        SUM(quantity) as ÊÄªÂ∫ìÂ≠òÈáè,
        COUNT(CASE WHEN status = 'È£éÈô©' THEN 1 END) as È£éÈô©Áâ©ÊñôÊï∞,
        COUNT(CASE WHEN status = 'ÂÜªÁªì' THEN 1 END) as ÂÜªÁªìÁâ©ÊñôÊï∞,
        COUNT(CASE WHEN status = 'Ê≠£Â∏∏' THEN 1 END) as Ê≠£Â∏∏Áâ©ÊñôÊï∞,
        GROUP_CONCAT(DISTINCT storage_location ORDER BY storage_location SEPARATOR ', ') as Â∑•ÂéÇÂàÜÂ∏É,
        GROUP_CONCAT(DISTINCT material_name ORDER BY material_name SEPARATOR ', ') as Áâ©ÊñôÊ∏ÖÂçï
      FROM inventory 
      WHERE supplier_name LIKE CONCAT('%', ?, '%')
      GROUP BY supplier_name`,
      JSON.stringify([
        {
          name: 'supplier_name',
          type: 'string',
          description: '‰æõÂ∫îÂïÜÂêçÁß∞',
          extract_patterns: [
            'Á¥´ÂÖâ',
            'ÂπøÊ≠£',
            'ÈªëÈæô',
            'Ê¨£Êó∫',
            'ÊØî‰∫öËø™',
            'ÂÆÅÂæ∑Êó∂‰ª£'
          ]
        }
      ]),
      'Êü•ËØ¢Á¥´ÂÖâ‰æõÂ∫îÂïÜÁöÑÁªüËÆ°Ê¶ÇÂÜµ',
      'active'
    ]);
    
    console.log('‚úÖ Ê∑ªÂä†‰æõÂ∫îÂïÜÁªüËÆ°Êü•ËØ¢ËßÑÂàô');
    
    console.log('üéâ ËßÑÂàô‰ºòÂåñÂÆåÊàêÔºÅ');
    
    // ÊòæÁ§∫ÂΩìÂâçÊâÄÊúâËßÑÂàô
    const [rules] = await connection.query(`
      SELECT intent_name, description, example_query 
      FROM nlp_intent_rules 
      WHERE status = 'active'
      ORDER BY created_at
    `);
    
    console.log('\nüìã ÂΩìÂâçÊ¥ªË∑ÉÁöÑÊü•ËØ¢ËßÑÂàô:');
    rules.forEach((rule, index) => {
      console.log(`${index + 1}. ${rule.intent_name}`);
      console.log(`   ÊèèËø∞: ${rule.description}`);
      console.log(`   Á§∫‰æã: ${rule.example_query}`);
      console.log('');
    });
    
  } catch (error) {
    console.error('‚ùå ‰ºòÂåñÂ§±Ë¥•:', error);
    throw error;
  } finally {
    if (connection) {
      await connection.end();
    }
  }
}

optimizeFactoryQueryRules().catch(console.error);
