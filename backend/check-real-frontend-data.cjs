// Ê£ÄÊü•ÊÇ®ÁöÑÁúüÂÆûÂâçÁ´ØÊï∞ÊçÆ
const mysql = require('mysql2/promise');

async function checkRealFrontendData() {
  const connection = await mysql.createConnection({
    host: 'localhost',
    user: 'root',
    password: 'Zxylsy.99',
    database: 'iqe_inspection'
  });

  try {
    console.log('üîç Ê£ÄÊü•ÊÇ®ÁöÑÁúüÂÆûÂâçÁ´ØÊï∞ÊçÆ...\n');
    
    // 1. Ê£ÄÊü•frontend_data_syncË°®ÁöÑÊúÄÊñ∞Êï∞ÊçÆ
    console.log('üìã Ê£ÄÊü•frontend_data_syncË°®:');
    const [syncRows] = await connection.execute(`
      SELECT id, data_type, 
             CHAR_LENGTH(data_content) as content_length,
             LEFT(data_content, 200) as preview,
             created_at 
      FROM frontend_data_sync 
      ORDER BY created_at DESC 
      LIMIT 10
    `);
    
    if (syncRows.length === 0) {
      console.log('‚ùå frontend_data_syncË°®‰∏≠Ê≤°ÊúâÊï∞ÊçÆ');
    } else {
      syncRows.forEach((row, index) => {
        console.log(`\nËÆ∞ÂΩï ${index + 1}:`);
        console.log(`  ID: ${row.id}`);
        console.log(`  Êï∞ÊçÆÁ±ªÂûã: ${row.data_type}`);
        console.log(`  ÂÜÖÂÆπÈïøÂ∫¶: ${row.content_length} Â≠óÁ¨¶`);
        console.log(`  ÂàõÂª∫Êó∂Èó¥: ${row.created_at}`);
        console.log(`  È¢ÑËßà: ${row.preview}...`);
      });
    }
    
    // 2. Ê£ÄÊü•ÊòØÂê¶ÊúâÂÖ∂‰ªñÂèØËÉΩÁöÑÊï∞ÊçÆË°®
    console.log('\nüìä Ê£ÄÊü•ÂÖ∂‰ªñÂèØËÉΩÁöÑÊï∞ÊçÆË°®:');
    
    // Ê£ÄÊü•inventory_dataË°®
    try {
      const [invRows] = await connection.execute(`
        SELECT COUNT(*) as count FROM inventory_data
      `);
      console.log(`  inventory_dataË°®: ${invRows[0].count} Êù°ËÆ∞ÂΩï`);
      
      if (invRows[0].count > 0) {
        const [sampleInv] = await connection.execute(`
          SELECT * FROM inventory_data LIMIT 3
        `);
        console.log('  Â∫ìÂ≠òÊï∞ÊçÆÊ†∑Êú¨:');
        sampleInv.forEach((item, index) => {
          console.log(`    ËÆ∞ÂΩï${index + 1}: ${JSON.stringify(item).substring(0, 100)}...`);
        });
      }
    } catch (error) {
      console.log('  inventory_dataË°®: ‰∏çÂ≠òÂú®ÊàñÊó†Ê≥ïËÆøÈóÆ');
    }
    
    // Ê£ÄÊü•lab_testsË°®
    try {
      const [labRows] = await connection.execute(`
        SELECT COUNT(*) as count FROM lab_tests
      `);
      console.log(`  lab_testsË°®: ${labRows[0].count} Êù°ËÆ∞ÂΩï`);
      
      if (labRows[0].count > 0) {
        const [sampleLab] = await connection.execute(`
          SELECT * FROM lab_tests LIMIT 3
        `);
        console.log('  Ê£ÄÈ™åÊï∞ÊçÆÊ†∑Êú¨:');
        sampleLab.forEach((item, index) => {
          console.log(`    ËÆ∞ÂΩï${index + 1}: ${JSON.stringify(item).substring(0, 100)}...`);
        });
      }
    } catch (error) {
      console.log('  lab_testsË°®: ‰∏çÂ≠òÂú®ÊàñÊó†Ê≥ïËÆøÈóÆ');
    }
    
    // Ê£ÄÊü•online_trackingË°®
    try {
      const [onlineRows] = await connection.execute(`
        SELECT COUNT(*) as count FROM online_tracking
      `);
      console.log(`  online_trackingË°®: ${onlineRows[0].count} Êù°ËÆ∞ÂΩï`);
      
      if (onlineRows[0].count > 0) {
        const [sampleOnline] = await connection.execute(`
          SELECT * FROM online_tracking LIMIT 3
        `);
        console.log('  Áîü‰∫ßÊï∞ÊçÆÊ†∑Êú¨:');
        sampleOnline.forEach((item, index) => {
          console.log(`    ËÆ∞ÂΩï${index + 1}: ${JSON.stringify(item).substring(0, 100)}...`);
        });
      }
    } catch (error) {
      console.log('  online_trackingË°®: ‰∏çÂ≠òÂú®ÊàñÊó†Ê≥ïËÆøÈóÆ');
    }
    
    // 3. Ê£ÄÊü•ÊâÄÊúâË°®
    console.log('\nüìö Êï∞ÊçÆÂ∫ì‰∏≠ÁöÑÊâÄÊúâË°®:');
    const [tables] = await connection.execute(`
      SHOW TABLES
    `);
    
    tables.forEach(table => {
      const tableName = Object.values(table)[0];
      console.log(`  - ${tableName}`);
    });
    
  } catch (error) {
    console.error('‚ùå Ê£ÄÊü•Â§±Ë¥•:', error.message);
  } finally {
    await connection.end();
  }
}

checkRealFrontendData();
