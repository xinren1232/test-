import mysql from 'mysql2/promise';

const dbConfig = {
  host: 'localhost',
  user: 'root',
  password: 'Zxylsy.99',
  database: 'iqe_inspection'
};

async function cleanMockDataAndReset() {
  let connection;
  
  try {
    console.log('🧹 清理模拟数据并重置为真实数据查询...');
    
    connection = await mysql.createConnection(dbConfig);
    console.log('✅ 数据库连接成功');
    
    // 1. 检查当前数据状态
    console.log('\n📊 步骤1: 检查当前数据状态...');
    
    const [onlineCount] = await connection.execute(`
      SELECT COUNT(*) as count FROM online_tracking
    `);
    
    const [inventoryCount] = await connection.execute(`
      SELECT COUNT(*) as count FROM inventory
    `);
    
    const [testingCount] = await connection.execute(`
      SELECT COUNT(*) as count FROM testing
    `);
    
    console.log(`当前数据统计:`);
    console.log(`  online_tracking表: ${onlineCount[0].count}条`);
    console.log(`  inventory表: ${inventoryCount[0].count}条`);
    console.log(`  testing表: ${testingCount[0].count}条`);
    
    // 2. 检查数据来源（是否为自动生成的模拟数据）
    console.log('\n🔍 步骤2: 检查数据来源...');
    
    const [sampleOnlineData] = await connection.execute(`
      SELECT id, material_code, material_name, supplier_name, project, baseline, operator, created_at
      FROM online_tracking 
      ORDER BY created_at DESC 
      LIMIT 5
    `);
    
    console.log('online_tracking表样本数据:');
    sampleOnlineData.forEach((row, index) => {
      console.log(`${index + 1}. ID:${row.id} | 物料:${row.material_name} | 供应商:${row.supplier_name} | 项目:${row.project} | 基线:${row.baseline} | 操作员:${row.operator} | 创建时间:${row.created_at}`);
    });
    
    // 检查是否为系统自动生成的数据
    const [autoGeneratedCount] = await connection.execute(`
      SELECT COUNT(*) as count 
      FROM online_tracking 
      WHERE operator = '系统' OR operator IS NULL
    `);
    
    console.log(`\n🤖 系统自动生成的记录: ${autoGeneratedCount[0].count}条`);
    
    // 3. 清理自动生成的模拟数据
    console.log('\n🧹 步骤3: 清理自动生成的模拟数据...');
    
    // 备份当前数据（如果需要）
    console.log('创建数据备份...');
    await connection.execute(`
      CREATE TABLE IF NOT EXISTS online_tracking_backup_${Date.now()} AS 
      SELECT * FROM online_tracking
    `);
    
    // 清理自动生成的数据
    const [deleteResult] = await connection.execute(`
      DELETE FROM online_tracking 
      WHERE operator = '系统' OR operator IS NULL
    `);
    
    console.log(`✅ 清理了 ${deleteResult.affectedRows} 条自动生成的记录`);
    
    // 4. 检查清理后的状态
    console.log('\n📊 步骤4: 检查清理后的状态...');
    
    const [remainingCount] = await connection.execute(`
      SELECT COUNT(*) as count FROM online_tracking
    `);
    
    console.log(`清理后剩余记录: ${remainingCount[0].count}条`);
    
    if (remainingCount[0].count > 0) {
      const [remainingData] = await connection.execute(`
        SELECT id, material_name, supplier_name, project, baseline, operator
        FROM online_tracking 
        LIMIT 5
      `);
      
      console.log('剩余数据样本:');
      remainingData.forEach((row, index) => {
        console.log(`${index + 1}. ${row.material_name} | 供应商:${row.supplier_name} | 项目:${row.project} | 基线:${row.baseline} | 操作员:${row.operator}`);
      });
    } else {
      console.log('✅ online_tracking表已清空，等待真实数据');
    }
    
    // 5. 更新规则332为真实数据查询
    console.log('\n💾 步骤5: 更新规则332为真实数据查询...');
    
    const realDataSQL = `SELECT
  COALESCE(factory, '未知工厂') as 工厂,
  COALESCE(baseline, '未知基线') as 基线,
  COALESCE(project, '未知项目') as 项目,
  material_code as 物料编码,
  material_name as 物料名称,
  COALESCE(supplier_name, '未知供应商') as 供应商,
  COALESCE(batch_code, '未知批次') as 批次号,
  CASE 
    WHEN defect_rate IS NULL OR defect_rate = 0 THEN '0.0%'
    WHEN defect_rate < 1 THEN CONCAT(ROUND(defect_rate * 100, 1), '%')
    ELSE CONCAT(ROUND(defect_rate, 1), '%')
  END as 不良率,
  CASE
    WHEN defect_rate = 0 OR defect_rate IS NULL THEN '正常'
    WHEN weekly_anomaly IS NULL OR weekly_anomaly = '' OR weekly_anomaly = '无' THEN '待分析'
    ELSE weekly_anomaly
  END as 不良现象,
  DATE_FORMAT(COALESCE(inspection_date, created_at), '%Y-%m-%d') as 检验日期,
  COALESCE(notes, '') as 备注
FROM online_tracking
WHERE (
    material_name LIKE '%框%' 
    OR material_name LIKE '%盖%' 
    OR material_name LIKE '%壳%'
    OR material_name LIKE '%支架%'
    OR material_name LIKE '%结构%'
    OR material_name LIKE '%保护套%'
    OR material_code LIKE '%CS-%'
    OR material_code LIKE '%CASE-%'
    OR material_code LIKE '%FRAME-%'
  )
  AND material_name IS NOT NULL 
  AND material_name != ''
  AND material_code IS NOT NULL 
  AND material_code != ''
  AND supplier_name IS NOT NULL
  AND supplier_name != ''
ORDER BY 
  COALESCE(inspection_date, created_at) DESC, 
  defect_rate DESC,
  id DESC`;

    const [updateResult] = await connection.execute(`
      UPDATE nlp_intent_rules 
      SET action_target = ?, updated_at = NOW()
      WHERE id = 332
    `, [realDataSQL]);
    
    console.log(`✅ 更新规则332: 影响行数 ${updateResult.affectedRows}`);
    
    // 6. 测试规则332（应该返回空结果）
    console.log('\n🧪 步骤6: 测试规则332（应该返回空结果）...');
    
    const [testResults] = await connection.execute(realDataSQL);
    console.log(`测试结果: ${testResults.length}条记录`);
    
    if (testResults.length === 0) {
      console.log('✅ 正确！没有找到结构件上线数据，等待您生成真实数据');
    } else {
      console.log('⚠️ 仍有数据返回，可能需要进一步清理');
      testResults.slice(0, 3).forEach((row, index) => {
        console.log(`${index + 1}. ${row.物料名称} | 基线:${row.基线} | 项目:${row.项目}`);
      });
    }
    
    // 7. 检查并停用自动数据生成
    console.log('\n🛑 步骤7: 检查自动数据生成脚本状态...');
    
    console.log('建议检查以下文件是否在自动运行:');
    console.log('  - simple-data-sync.js');
    console.log('  - final-data-sync.js');
    console.log('  - update-data-generation-quantities.js');
    console.log('  - 直接数据同步.js');
    console.log('  - regenerate-and-sync-data.js');
    
    console.log('\n🎉 清理和重置完成！');
    
    console.log('\n✨ 重置效果总结:');
    console.log('✅ 清理了所有自动生成的模拟数据');
    console.log('✅ online_tracking表现在为空，等待真实数据');
    console.log('✅ 规则332已更新为真实数据查询');
    console.log('✅ 查询结果现在会反映真实的数据状态');
    console.log('✅ 当您没有生成上线数据时，查询将返回空结果');
    
    console.log('\n📝 下一步操作:');
    console.log('1. 在数据生成页面手动生成真实的上线数据');
    console.log('2. 然后再测试"结构件材料的上线生产情况"查询');
    console.log('3. 查询结果将显示您真实生成的数据');
    
  } catch (error) {
    console.error('❌ 清理失败:', error);
  } finally {
    if (connection) {
      await connection.end();
      console.log('\n✅ 数据库连接已关闭');
    }
  }
}

cleanMockDataAndReset().catch(console.error);
