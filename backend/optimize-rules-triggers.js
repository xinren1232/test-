/**
 * ‰ºòÂåñËßÑÂàôËß¶ÂèëËØçÔºåÊèêÈ´òÂåπÈÖçÂáÜÁ°ÆÁéá
 */

import mysql from 'mysql2/promise';

const dbConfig = {
  host: 'localhost',
  user: 'root',
  password: 'Zxylsy.99',
  database: 'iqe_inspection'
};

// ‰ºòÂåñÁöÑËß¶ÂèëËØçÊò†Â∞Ñ
const OPTIMIZED_TRIGGERS = {
  'Áâ©ÊñôÂêçÁß∞Â∫ìÂ≠òÊü•ËØ¢': ['ÁîµÊ±†', 'ÁîµÊ±†Áõñ', '‰∏≠Ê°Ü', 'ÊòæÁ§∫Â±è', 'ÊëÑÂÉèÂ§¥', 'ÂñáÂè≠', 'Âê¨Á≠í', 'Áâ©ÊñôÂêçÁß∞'],
  'Â∫ìÂ≠òÁä∂ÊÄÅÊü•ËØ¢': ['Ê≠£Â∏∏Â∫ìÂ≠ò', 'ÂÜªÁªìÂ∫ìÂ≠ò', 'È£éÈô©Â∫ìÂ≠ò', 'Áä∂ÊÄÅ', 'Ê≠£Â∏∏Áä∂ÊÄÅ', 'ÂÜªÁªìÁä∂ÊÄÅ'],
  'Áâ©Êñô‰∏äÁ∫øË∑üË∏™Êü•ËØ¢': ['‰∏äÁ∫ø', '‰∏äÁ∫øË∑üË∏™', 'Áîü‰∫ß', '‰∫ßÁ∫ø', 'Áâ©Êñô‰∏äÁ∫ø', '‰∏äÁ∫øÊÉÖÂÜµ'],
  'ÂºÇÂ∏∏Áâ©Êñô‰∏äÁ∫øÊü•ËØ¢': ['ÂºÇÂ∏∏', 'Êú¨Âë®ÂºÇÂ∏∏', 'ÂºÇÂ∏∏Áâ©Êñô', 'ÊúâÂºÇÂ∏∏', 'ÂºÇÂ∏∏‰∏äÁ∫ø'],
  'ÂÖÖÁîµÁ±ªÁâ©ÊñôÊü•ËØ¢': ['ÂÖÖÁîµ', 'ÁîµÊ±†', 'ÂÖÖÁîµÂô®', 'ÂÖÖÁîµÁ±ª'],
  'Â£∞Â≠¶Á±ªÁâ©ÊñôÊü•ËØ¢': ['Â£∞Â≠¶', 'ÂñáÂè≠', 'Âê¨Á≠í', 'Â£∞Â≠¶Á±ª'],
  'ËÅöÈæô‰æõÂ∫îÂïÜÊü•ËØ¢': ['ËÅöÈæô', 'ËÅöÈæô‰æõÂ∫îÂïÜ'],
  'Â§©È©¨‰æõÂ∫îÂïÜÊü•ËØ¢': ['Â§©È©¨', 'Â§©È©¨‰æõÂ∫îÂïÜ'],
  '‰æõÂ∫îÂïÜÂØπÊØîÂàÜÊûê': ['‰æõÂ∫îÂïÜÂØπÊØî', '‰æõÂ∫îÂïÜÂàÜÊûê', 'Ë¥®ÈáèÂØπÊØî', '‰æõÂ∫îÂïÜË¥®Èáè', 'ÂØπÊØîÂêÑ‰æõÂ∫îÂïÜ', 'Ë¥®ÈáèË°®Áé∞'],
  'ÊâπÊ¨°ÁªºÂêà‰ø°ÊÅØÊü•ËØ¢': ['ÊâπÊ¨°', 'ÊâπÊ¨°‰ø°ÊÅØ', 'ÊâπÊ¨°Êü•ËØ¢', 'ÊâπÂè∑', 'ÊâπÊ¨°ÁªºÂêà']
};

async function optimizeRulesTriggers() {
  let connection;
  
  try {
    console.log('üîß ÂºÄÂßã‰ºòÂåñËßÑÂàôËß¶ÂèëËØç...');
    
    connection = await mysql.createConnection(dbConfig);
    console.log('‚úÖ Êï∞ÊçÆÂ∫ìËøûÊé•ÊàêÂäü');
    
    let updateCount = 0;
    
    for (const [ruleName, newTriggers] of Object.entries(OPTIMIZED_TRIGGERS)) {
      try {
        const [result] = await connection.execute(
          'UPDATE nlp_intent_rules SET trigger_words = ? WHERE intent_name = ?',
          [JSON.stringify(newTriggers), ruleName]
        );
        
        if (result.affectedRows > 0) {
          console.log(`‚úÖ Êõ¥Êñ∞ËßÑÂàô: ${ruleName}`);
          console.log(`   Êñ∞Ëß¶ÂèëËØç: [${newTriggers.join(', ')}]`);
          updateCount++;
        } else {
          console.log(`‚ùå ËßÑÂàô‰∏çÂ≠òÂú®: ${ruleName}`);
        }
      } catch (error) {
        console.log(`‚ùå Êõ¥Êñ∞Â§±Ë¥• ${ruleName}: ${error.message}`);
      }
    }
    
    console.log(`\nüéâ Ëß¶ÂèëËØç‰ºòÂåñÂÆåÊàê! Êõ¥Êñ∞‰∫Ü ${updateCount} Êù°ËßÑÂàô`);
    
    // È™åËØÅÊõ¥Êñ∞ÁªìÊûú
    console.log('\nüîç È™åËØÅÊõ¥Êñ∞ÁªìÊûú...');
    const [rules] = await connection.execute(`
      SELECT intent_name, trigger_words 
      FROM nlp_intent_rules 
      WHERE intent_name IN (${Object.keys(OPTIMIZED_TRIGGERS).map(() => '?').join(',')})
    `, Object.keys(OPTIMIZED_TRIGGERS));
    
    rules.forEach(rule => {
      console.log(`${rule.intent_name}: [${rule.trigger_words.join(', ')}]`);
    });
    
  } catch (error) {
    console.error('‚ùå ‰ºòÂåñÂ§±Ë¥•:', error);
  } finally {
    if (connection) {
      await connection.end();
    }
  }
}

optimizeRulesTriggers().catch(console.error);
