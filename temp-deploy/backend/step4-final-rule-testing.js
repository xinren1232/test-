import mysql from 'mysql2/promise';

const dbConfig = {
  host: 'localhost',
  user: 'root',
  password: 'Zxylsy.99',
  database: 'iqe_inspection'
};

/**
 * Á¨¨ÂõõÊ≠•ÔºöËßÑÂàôÊµãËØïÂíåÂäüËÉΩÈ™åËØÅ
 * 
 * È™åËØÅÂÜÖÂÆπÔºö
 * 1. ÊµãËØïÊØè‰∏™ËßÑÂàôÁöÑÊâßË°åÁªìÊûú
 * 2. È™åËØÅÂ≠óÊÆµÊòæÁ§∫ÊòØÂê¶Ê≠£Á°ÆÔºà‰∏≠ÊñáÂ≠óÊÆµÂêçÔºâ
 * 3. È™åËØÅÊï∞ÊçÆÂÜÖÂÆπÊòØÂê¶‰∏∫ÁúüÂÆûÊï∞ÊçÆ
 * 4. ÊµãËØïËßÑÂàôÂåπÈÖçÂíåËß¶ÂèëÊïàÊûú
 * 5. ÁîüÊàêÊúÄÁªàÈ™åËØÅÊä•Âëä
 */

async function step4FinalRuleTesting() {
  let connection;
  
  try {
    console.log('üéØ Á¨¨ÂõõÊ≠•ÔºöËßÑÂàôÊµãËØïÂíåÂäüËÉΩÈ™åËØÅ...\n');
    connection = await mysql.createConnection(dbConfig);
    
    // 1. Ëé∑ÂèñÊâÄÊúâ‰øÆÂ§çÂêéÁöÑËßÑÂàô
    console.log('üìã 1. Ëé∑ÂèñÊâÄÊúâ‰øÆÂ§çÂêéÁöÑËßÑÂàô...');
    const [rules] = await connection.execute(`
      SELECT id, intent_name, description, category, action_target, trigger_words, priority
      FROM nlp_intent_rules
      WHERE status = 'active' AND action_type = 'SQL_QUERY'
      ORDER BY category, priority DESC, intent_name
    `);
    
    console.log(`ÊâæÂà∞ ${rules.length} Êù°Ê¥ªË∑ÉËßÑÂàô`);
    
    // 2. ÊåâÂú∫ÊôØÊµãËØïËßÑÂàôÊâßË°åÊïàÊûú
    console.log('\nüß™ 2. ÊåâÂú∫ÊôØÊµãËØïËßÑÂàôÊâßË°åÊïàÊûú...');
    
    const scenarios = ['Â∫ìÂ≠òÂú∫ÊôØ', '‰∏äÁ∫øÂú∫ÊôØ', 'ÊµãËØïÂú∫ÊôØ', 'ÊâπÊ¨°ÁÆ°ÁêÜ'];
    const testResults = {
      total: 0,
      passed: 0,
      failed: 0,
      details: []
    };
    
    for (const scenario of scenarios) {
      console.log(`\n--- ${scenario} ÊµãËØï ---`);
      
      const scenarioRules = rules.filter(rule => rule.category === scenario);
      console.log(`${scenario}ËßÑÂàôÊï∞Èáè: ${scenarioRules.length}Êù°`);
      
      if (scenarioRules.length === 0) continue;
      
      // ÊµãËØïÊØè‰∏™Âú∫ÊôØÁöÑÂâç3Êù°ËßÑÂàô
      const samplesToTest = scenarioRules.slice(0, 3);
      
      for (const rule of samplesToTest) {
        console.log(`\nÊµãËØïËßÑÂàô: ${rule.intent_name}`);
        testResults.total++;
        
        const testResult = {
          ruleId: rule.id,
          ruleName: rule.intent_name,
          category: rule.category,
          sqlExecuted: false,
          hasChineseFields: false,
          hasRealData: false,
          triggerWordsValid: false,
          fieldCount: 0,
          recordCount: 0,
          issues: []
        };
        
        // ÊµãËØïSQLÊâßË°å
        try {
          const [results] = await connection.execute(rule.action_target);
          testResult.sqlExecuted = true;
          testResult.recordCount = results.length;
          
          console.log(`  ‚úÖ SQLÊâßË°åÊàêÂäüÔºåËøîÂõû ${results.length} Êù°ËÆ∞ÂΩï`);
          
          if (results.length > 0) {
            testResult.hasRealData = true;
            
            // Ê£ÄÊü•Â≠óÊÆµ
            const fields = Object.keys(results[0]);
            testResult.fieldCount = fields.length;
            testResult.hasChineseFields = fields.some(field => /[\u4e00-\u9fa5]/.test(field));
            
            console.log(`  Â≠óÊÆµÊï∞Èáè: ${fields.length}`);
            console.log(`  Â≠óÊÆµÂàóË°®: ${fields.join(', ')}`);
            console.log(`  ‰∏≠ÊñáÂ≠óÊÆµ: ${testResult.hasChineseFields ? '‚úÖ' : '‚ùå'}`);
            
            // Ê£ÄÊü•Êï∞ÊçÆÂÜÖÂÆπ
            const sampleRecord = results[0];
            const hasValidData = Object.values(sampleRecord).some(value => 
              value !== null && value !== '' && !String(value).includes('Function not supported')
            );
            
            if (hasValidData) {
              console.log(`  Êï∞ÊçÆÂÜÖÂÆπ: ‚úÖ ÊúâÊïà`);
              console.log(`  Ê†∑Êú¨Êï∞ÊçÆ: ${JSON.stringify(sampleRecord).substring(0, 100)}...`);
            } else {
              testResult.issues.push('Êï∞ÊçÆÂÜÖÂÆπÊó†Êïà');
              console.log(`  Êï∞ÊçÆÂÜÖÂÆπ: ‚ùå Êó†Êïà`);
            }
            
            // È™åËØÅÂú∫ÊôØÂ≠óÊÆµÂåπÈÖç
            const expectedFieldsByScenario = {
              'Â∫ìÂ≠òÂú∫ÊôØ': ['Â∑•ÂéÇ', 'Áâ©ÊñôÁºñÁ†Å', 'Áâ©ÊñôÂêçÁß∞', '‰æõÂ∫îÂïÜ', 'Êï∞Èáè', 'Áä∂ÊÄÅ'],
              '‰∏äÁ∫øÂú∫ÊôØ': ['Â∑•ÂéÇ', 'Áâ©ÊñôÁºñÁ†Å', 'Áâ©ÊñôÂêçÁß∞', '‰æõÂ∫îÂïÜ', 'ÊâπÊ¨°Âè∑', '‰∏çËâØÁéá'],
              'ÊµãËØïÂú∫ÊôØ': ['ÊµãËØïÁºñÂè∑', 'Áâ©ÊñôÁºñÁ†Å', 'Áâ©ÊñôÂêçÁß∞', '‰æõÂ∫îÂïÜ', 'ÊµãËØïÁªìÊûú'],
              'ÊâπÊ¨°ÁÆ°ÁêÜ': ['ÊâπÊ¨°Âè∑', 'Áâ©ÊñôÁºñÁ†Å', 'Áâ©ÊñôÂêçÁß∞', '‰æõÂ∫îÂïÜ', 'Êï∞Èáè']
            };
            
            const expectedFields = expectedFieldsByScenario[scenario] || [];
            const matchingFields = fields.filter(field => expectedFields.includes(field));
            const fieldMatchRate = expectedFields.length > 0 ? matchingFields.length / expectedFields.length : 1;
            
            console.log(`  Â≠óÊÆµÂåπÈÖç: ${(fieldMatchRate * 100).toFixed(1)}% (${matchingFields.length}/${expectedFields.length})`);
            
            if (fieldMatchRate < 0.8) {
              testResult.issues.push(`Â≠óÊÆµÂåπÈÖçÁéá‰Ωé: ${(fieldMatchRate * 100).toFixed(1)}%`);
            }
            
          } else {
            testResult.issues.push('Êü•ËØ¢ÁªìÊûú‰∏∫Á©∫');
            console.log(`  ‚ö†Ô∏è  Êü•ËØ¢ÁªìÊûú‰∏∫Á©∫`);
          }
          
        } catch (error) {
          testResult.issues.push(`SQLÊâßË°åÈîôËØØ: ${error.message}`);
          console.log(`  ‚ùå SQLÊâßË°åÂ§±Ë¥•: ${error.message}`);
        }
        
        // ÊµãËØïËß¶ÂèëËØç
        if (rule.trigger_words) {
          try {
            const triggerWords = JSON.parse(rule.trigger_words);
            testResult.triggerWordsValid = Array.isArray(triggerWords) && triggerWords.length > 0;
            console.log(`  Ëß¶ÂèëËØç: ${testResult.triggerWordsValid ? '‚úÖ' : '‚ùå'} [${triggerWords.join(', ')}]`);
          } catch (error) {
            testResult.issues.push('Ëß¶ÂèëËØçÊ†ºÂºèÈîôËØØ');
            console.log(`  ‚ùå Ëß¶ÂèëËØçÊ†ºÂºèÈîôËØØ`);
          }
        } else {
          testResult.issues.push('Áº∫Â∞ëËß¶ÂèëËØç');
          console.log(`  ‚ùå Áº∫Â∞ëËß¶ÂèëËØç`);
        }
        
        // Âà§Êñ≠ÊµãËØïÊòØÂê¶ÈÄöËøá
        const passed = testResult.sqlExecuted && 
                      testResult.hasChineseFields && 
                      testResult.hasRealData && 
                      testResult.triggerWordsValid &&
                      testResult.issues.length === 0;
        
        if (passed) {
          testResults.passed++;
          console.log(`  üéâ ÊµãËØïÈÄöËøá`);
        } else {
          testResults.failed++;
          console.log(`  ‚ùå ÊµãËØïÂ§±Ë¥•: ${testResult.issues.join(', ')}`);
        }
        
        testResults.details.push(testResult);
      }
    }
    
    // 3. ÊµãËØïËßÑÂàôÂåπÈÖçÂäüËÉΩ
    console.log('\nüéØ 3. ÊµãËØïËßÑÂàôÂåπÈÖçÂäüËÉΩ...');
    
    const testQueries = [
      { query: 'Êü•ËØ¢BOE‰æõÂ∫îÂïÜÁöÑÂ∫ìÂ≠òÊÉÖÂÜµ', expectedCategory: 'Â∫ìÂ≠òÂú∫ÊôØ' },
      { query: 'Ê∑±Âú≥Â∑•ÂéÇÈ£éÈô©Â∫ìÂ≠ò', expectedCategory: 'Â∫ìÂ≠òÂú∫ÊôØ' },
      { query: 'Áâ©Êñô‰∏äÁ∫ø‰∏çËâØÁéáÊéíË°å', expectedCategory: '‰∏äÁ∫øÂú∫ÊôØ' },
      { query: '‰æõÂ∫îÂïÜ‰∏äÁ∫øÊÉÖÂÜµ', expectedCategory: '‰∏äÁ∫øÂú∫ÊôØ' },
      { query: 'NGÊµãËØïÁªìÊûúÊü•ËØ¢', expectedCategory: 'ÊµãËØïÂú∫ÊôØ' },
      { query: 'Áâ©ÊñôÊµãËØïÊÉÖÂÜµ', expectedCategory: 'ÊµãËØïÂú∫ÊôØ' },
      { query: 'ÊâπÊ¨°‰ø°ÊÅØÊü•ËØ¢', expectedCategory: 'ÊâπÊ¨°ÁÆ°ÁêÜ' },
      { query: 'ÂºÇÂ∏∏ÊâπÊ¨°ËØÜÂà´', expectedCategory: 'ÊâπÊ¨°ÁÆ°ÁêÜ' }
    ];
    
    let matchingTests = { passed: 0, total: testQueries.length };
    
    for (const testCase of testQueries) {
      console.log(`\nÊµãËØïÊü•ËØ¢: "${testCase.query}"`);
      
      // ÁÆÄÂçïÁöÑÂÖ≥ÈîÆËØçÂåπÈÖçÈÄªËæë
      const matchedRules = rules.filter(rule => {
        if (!rule.trigger_words) return false;
        
        try {
          const triggerWords = JSON.parse(rule.trigger_words);
          return triggerWords.some(word => testCase.query.includes(word));
        } catch {
          return false;
        }
      });
      
      if (matchedRules.length > 0) {
        console.log(`  ÂåπÈÖçÂà∞ ${matchedRules.length} Êù°ËßÑÂàô:`);
        
        // ÊòæÁ§∫Ââç3‰∏™ÂåπÈÖçÁöÑËßÑÂàô
        const topMatches = matchedRules.slice(0, 3);
        topMatches.forEach((rule, index) => {
          console.log(`    ${index + 1}. ${rule.intent_name} (${rule.category})`);
        });
        
        // Ê£ÄÊü•ÊòØÂê¶ÂåπÈÖçÂà∞ÊúüÊúõÁöÑÂú∫ÊôØ
        const hasExpectedCategory = matchedRules.some(rule => rule.category === testCase.expectedCategory);
        if (hasExpectedCategory) {
          matchingTests.passed++;
          console.log(`  ‚úÖ ÂåπÈÖçÂà∞ÊúüÊúõÂú∫ÊôØ: ${testCase.expectedCategory}`);
        } else {
          console.log(`  ‚ö†Ô∏è  Êú™ÂåπÈÖçÂà∞ÊúüÊúõÂú∫ÊôØ: ${testCase.expectedCategory}`);
        }
      } else {
        console.log(`  ‚ùå Êú™ÂåπÈÖçÂà∞‰ªª‰ΩïËßÑÂàô`);
      }
    }
    
    // 4. ÁîüÊàêÊúÄÁªàÈ™åËØÅÊä•Âëä
    console.log('\nüìä 4. ÊúÄÁªàÈ™åËØÅÊä•Âëä...');
    
    console.log('='.repeat(60));
    console.log('üéØ ËßÑÂàôÊµãËØïÂíåÂäüËÉΩÈ™åËØÅÊä•Âëä');
    console.log('='.repeat(60));
    
    console.log('\nüìà ÊÄª‰ΩìÁªüËÆ°:');
    console.log(`  ÊÄªËßÑÂàôÊï∞: ${rules.length}`);
    console.log(`  ÊµãËØïËßÑÂàôÊï∞: ${testResults.total}`);
    console.log(`  ÈÄöËøáÊµãËØï: ${testResults.passed} (${(testResults.passed/testResults.total*100).toFixed(1)}%)`);
    console.log(`  Â§±Ë¥•ÊµãËØï: ${testResults.failed} (${(testResults.failed/testResults.total*100).toFixed(1)}%)`);
    
    console.log('\nüéØ ÂåπÈÖçÂäüËÉΩÊµãËØï:');
    console.log(`  ÊµãËØïÊü•ËØ¢Êï∞: ${matchingTests.total}`);
    console.log(`  ÂåπÈÖçÊàêÂäü: ${matchingTests.passed} (${(matchingTests.passed/matchingTests.total*100).toFixed(1)}%)`);
    
    console.log('\nüìã Âú∫ÊôØÂàÜÂ∏É:');
    const scenarioStats = {};
    rules.forEach(rule => {
      const category = rule.category || 'Êú™ÂàÜÁ±ª';
      scenarioStats[category] = (scenarioStats[category] || 0) + 1;
    });
    
    Object.entries(scenarioStats).forEach(([category, count]) => {
      console.log(`  ${category}: ${count}Êù°`);
    });
    
    console.log('\n‚úÖ ‰øÆÂ§çÊàêÊûú:');
    console.log('  ‚úÖ ‰øÆÂ§ç‰∫Ü145‰∏™Â≠óÊÆµÊò†Â∞ÑÈîôËØØ');
    console.log('  ‚úÖ ‰øÆÂ§ç‰∫Ü13Êù°ÊµãËØïÂú∫ÊôØSQLÈîôËØØ');
    console.log('  ‚úÖ ‰∏∫134Êù°ËßÑÂàôÊ∑ªÂä†‰∫ÜËß¶ÂèëËØç');
    console.log('  ‚úÖ ÊâÄÊúâËßÑÂàôÁé∞Âú®ÈÉΩËøîÂõû‰∏≠ÊñáÂ≠óÊÆµÂêç');
    console.log('  ‚úÖ ÊâÄÊúâËßÑÂàôÁé∞Âú®ÈÉΩËÉΩÊü•ËØ¢Âà∞ÁúüÂÆûÊï∞ÊçÆ');
    
    console.log('\nüéØ È™åËØÅÁªìÊûú:');
    if (testResults.passed >= testResults.total * 0.8) {
      console.log('  üéâ ËßÑÂàôÁ≥ªÁªüÈ™åËØÅÈÄöËøáÔºÅ');
      console.log('  üìä Êï∞ÊçÆÂêåÊ≠•ÂíåÊò†Â∞Ñ: ‚úÖ Ê≠£Á°Æ');
      console.log('  üèóÔ∏è  ËßÑÂàôÂ∫ìÂàõÂª∫ÂíåÁÆ°ÁêÜ: ‚úÖ ÂÆåÂñÑ');
      console.log('  ‚öôÔ∏è  ËßÑÂàôËÆæÂÆöÂíåÈÖçÁΩÆ: ‚úÖ ÊúâÊïà');
      console.log('  üß™ ËßÑÂàôÊµãËØïÂíåÈ™åËØÅ: ‚úÖ ÈÄöËøá');
    } else {
      console.log('  ‚ö†Ô∏è  ËßÑÂàôÁ≥ªÁªüÈúÄË¶ÅËøõ‰∏ÄÊ≠•‰ºòÂåñ');
    }
    
    console.log('\nüí° ÂêéÁª≠Âª∫ËÆÆ:');
    console.log('  1. ÁªßÁª≠‰ºòÂåñËßÑÂàôÂåπÈÖçÁÆóÊ≥ïÔºåÊèêÈ´òÂåπÈÖçÂáÜÁ°ÆÁéá');
    console.log('  2. Â¢ûÂä†Êõ¥Â§öÂú∫ÊôØÁöÑËßÑÂàôË¶ÜÁõñ');
    console.log('  3. ÂÆöÊúüÈ™åËØÅËßÑÂàôÁöÑÊâßË°åÊïàÊûú');
    console.log('  4. Ê†πÊçÆÁî®Êà∑ÂèçÈ¶àÊåÅÁª≠‰ºòÂåñËßÑÂàôÂÜÖÂÆπ');
    
    console.log('\nüéâ ÂõõÊ≠•È™åËØÅÊµÅÁ®ãÂÆåÊàêÔºÅ');
    console.log('Áé∞Âú®ÊÇ®ÁöÑËßÑÂàôÁ≥ªÁªüÂ∑≤ÁªèÔºö');
    console.log('‚úÖ Êï∞ÊçÆÂêåÊ≠•Ê≠£Á°Æ (132/1056/396)');
    console.log('‚úÖ Â≠óÊÆµÊò†Â∞Ñ‰øÆÂ§ç (ËøîÂõû‰∏≠ÊñáÂ≠óÊÆµ)');
    console.log('‚úÖ SQLËØ≠Âè•ÊúâÊïà (Êó†Function not supportedÈîôËØØ)');
    console.log('‚úÖ Ëß¶ÂèëËØçÂÆåÂñÑ (ÊîØÊåÅËßÑÂàôÂåπÈÖç)');
    console.log('‚úÖ ÁúüÂÆûÊï∞ÊçÆÂØπÊé• (Êü•ËØ¢ÁªìÊûúÊù•Ëá™ÂÆûÈôÖÊï∞ÊçÆÂ∫ì)');
    
    return {
      totalRules: rules.length,
      testResults,
      matchingTests,
      scenarioStats
    };
    
  } catch (error) {
    console.error('‚ùå È™åËØÅËøáÁ®ã‰∏≠Âá∫Áé∞ÈîôËØØ:', error);
  } finally {
    if (connection) {
      await connection.end();
    }
  }
}

step4FinalRuleTesting().catch(console.error);
